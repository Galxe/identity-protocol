{
  "address": "0x7D805b60Cda304B5e1C3F51fd10035A46C640F97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUpaVerifier",
          "name": "upaVerifier",
          "type": "address"
        },
        {
          "internalType": "contract ITypeRegistry",
          "name": "typeRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IIssuerRegistry",
          "name": "issuerRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIssuerRegistry",
          "name": "oldIssuerRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIssuerRegistry",
          "name": "newIssuerRegistry",
          "type": "address"
        }
      ],
      "name": "IssuerRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ITypeRegistry",
          "name": "oldTypeRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ITypeRegistry",
          "name": "newTypeRegistry",
          "type": "address"
        }
      ],
      "name": "TypeRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IUpaVerifier",
          "name": "oldUpaVerifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IUpaVerifier",
          "name": "newUpaVerifier",
          "type": "address"
        }
      ],
      "name": "UpaVerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STACK_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIssuerRegistry",
      "outputs": [
        {
          "internalType": "contract IIssuerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTypeRegistry",
      "outputs": [
        {
          "internalType": "contract ITypeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpaVerifier",
      "outputs": [
        {
          "internalType": "contract IUpaVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIssuerRegistry",
          "name": "issuerRegistry",
          "type": "address"
        }
      ],
      "name": "updateIssuerRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITypeRegistry",
          "name": "typeRegistry",
          "type": "address"
        }
      ],
      "name": "updateTypeRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUpaVerifier",
          "name": "upaVerifier",
          "type": "address"
        }
      ],
      "name": "updateUpaVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "contextId",
          "type": "uint160"
        },
        {
          "internalType": "uint256",
          "name": "issuerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circuitId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "publicSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProofFull",
      "outputs": [
        {
          "internalType": "enum VerifyResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "contextId",
          "type": "uint160"
        },
        {
          "internalType": "uint256",
          "name": "issuerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circuitId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "publicSignals",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "submissionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint16",
              "name": "location",
              "type": "uint16"
            }
          ],
          "internalType": "struct ProofReference",
          "name": "proofReference",
          "type": "tuple"
        }
      ],
      "name": "verifyProofFullFromMultiProof",
      "outputs": [
        {
          "internalType": "enum VerifyResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "contextId",
          "type": "uint160"
        },
        {
          "internalType": "uint256",
          "name": "keyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circuitId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "publicSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProofStatic",
      "outputs": [
        {
          "internalType": "enum VerifyResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint160",
          "name": "contextId",
          "type": "uint160"
        },
        {
          "internalType": "uint256",
          "name": "keyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circuitId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "publicSignals",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "submissionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint16",
              "name": "location",
              "type": "uint16"
            }
          ],
          "internalType": "struct ProofReference",
          "name": "proofReference",
          "type": "tuple"
        }
      ],
      "name": "verifyProofStaticFromMultiProof",
      "outputs": [
        {
          "internalType": "enum VerifyResult",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x93c562b0696bc540350d4a8f976a0e70958814a79d6b1c88477dbab6ac4ab767",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xa5E5EA38cF3bD36475596858AC7546d17752E4A7",
    "contractAddress": null,
    "transactionIndex": 22,
    "gasUsed": "1344495",
    "logsBloom": "0x
    "blockHash": "0xbebac213f36aeb1122ed6f3cf26145fa63207afd252c9d8b754f970ccb3f09a2",
    "transactionHash": "0x93c562b0696bc540350d4a8f976a0e70958814a79d6b1c88477dbab6ac4ab767",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 6809621,
        "transactionHash": "0x93c562b0696bc540350d4a8f976a0e70958814a79d6b1c88477dbab6ac4ab767",
        "address": "0x7D805b60Cda304B5e1C3F51fd10035A46C640F97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xbebac213f36aeb1122ed6f3cf26145fa63207afd252c9d8b754f970ccb3f09a2"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 6809621,
        "transactionHash": "0x93c562b0696bc540350d4a8f976a0e70958814a79d6b1c88477dbab6ac4ab767",
        "address": "0x7D805b60Cda304B5e1C3F51fd10035A46C640F97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000a5e5ea38cf3bd36475596858ac7546d17752e4a7"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xbebac213f36aeb1122ed6f3cf26145fa63207afd252c9d8b754f970ccb3f09a2"
      }
    ],
    "blockNumber": 6809621,
    "cumulativeGasUsed": "28473331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8bdEa1842afb8Be3b46d8fE8D6d110eDE057d7c7",
    "0x77dA3Cf4418009D171B4963db815Ca46d6F2E79D",
    "0xc4525dA874A6A3877db65e37f21eEc0b41ef9877",
    "0xa5E5EA38cF3bD36475596858AC7546d17752E4A7"
  ],
  "numDeployments": 6,
  "solcInputHash": "e08d6b930820ab219ef1afbfaba72b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUpaVerifier\",\"name\":\"upaVerifier\",\"type\":\"address\"},{\"internalType\":\"contract ITypeRegistry\",\"name\":\"typeRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIssuerRegistry\",\"name\":\"issuerRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIssuerRegistry\",\"name\":\"oldIssuerRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIssuerRegistry\",\"name\":\"newIssuerRegistry\",\"type\":\"address\"}],\"name\":\"IssuerRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITypeRegistry\",\"name\":\"oldTypeRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITypeRegistry\",\"name\":\"newTypeRegistry\",\"type\":\"address\"}],\"name\":\"TypeRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUpaVerifier\",\"name\":\"oldUpaVerifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IUpaVerifier\",\"name\":\"newUpaVerifier\",\"type\":\"address\"}],\"name\":\"UpaVerifierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STACK_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIssuerRegistry\",\"outputs\":[{\"internalType\":\"contract IIssuerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeRegistry\",\"outputs\":[{\"internalType\":\"contract ITypeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpaVerifier\",\"outputs\":[{\"internalType\":\"contract IUpaVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIssuerRegistry\",\"name\":\"issuerRegistry\",\"type\":\"address\"}],\"name\":\"updateIssuerRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITypeRegistry\",\"name\":\"typeRegistry\",\"type\":\"address\"}],\"name\":\"updateTypeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUpaVerifier\",\"name\":\"upaVerifier\",\"type\":\"address\"}],\"name\":\"updateUpaVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"issuerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"publicSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProofFull\",\"outputs\":[{\"internalType\":\"enum VerifyResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"issuerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"publicSignals\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16\",\"name\":\"location\",\"type\":\"uint16\"}],\"internalType\":\"struct ProofReference\",\"name\":\"proofReference\",\"type\":\"tuple\"}],\"name\":\"verifyProofFullFromMultiProof\",\"outputs\":[{\"internalType\":\"enum VerifyResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"publicSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProofStatic\",\"outputs\":[{\"internalType\":\"enum VerifyResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"contextId\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"publicSignals\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16\",\"name\":\"location\",\"type\":\"uint16\"}],\"internalType\":\"struct ProofReference\",\"name\":\"proofReference\",\"type\":\"tuple\"}],\"name\":\"verifyProofStaticFromMultiProof\",\"outputs\":[{\"internalType\":\"enum VerifyResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"IssuerRegistryUpdated(address,address)\":{\"params\":{\"newIssuerRegistry\":\"The address of the new IssuerRegistry.\",\"oldIssuerRegistry\":\"The address of the old IssuerRegistry.\"}},\"TypeRegistryUpdated(address,address)\":{\"params\":{\"newTypeRegistry\":\"The address of the new TypeRegistry.\",\"oldTypeRegistry\":\"The address of the old TypeRegistry.\"}},\"UpaVerifierUpdated(address,address)\":{\"params\":{\"newUpaVerifier\":\"The address of the new UpaVerifier.\",\"oldUpaVerifier\":\"The address of the old UpaVerifier.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"BabyzkVerifier constructor\",\"params\":{\"issuerRegistry\":\"issuer registry contract\",\"typeRegistry\":\"type registry contract\"}},\"getIssuerRegistry()\":{\"details\":\"return the issuer registry\"},\"getTypeRegistry()\":{\"details\":\"return the type registry\"},\"getUpaVerifier()\":{\"details\":\"return the upa verifier\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateIssuerRegistry(address)\":{\"details\":\"update the issuer registry\"},\"updateTypeRegistry(address)\":{\"details\":\"update the type registry\"},\"updateUpaVerifier(address)\":{\"details\":\"update the upa verifier\"},\"verifyProofFull(uint160,uint160,uint256,uint256,uint256[])\":{\"details\":\"Stateful verification of zero-knowledge proofs that checks      if the proof is valid and the issuer public key is active, and      for revocation checks if the the smt root matches.The trust relationship between the credential and issuer is binded by      the public key ID:      credential <--- signed by ---- publikc key <--- authroized by ---- issuer      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,      However, note that it does not mean that the credential is directly generated by the issuer.\"},\"verifyProofFullFromMultiProof(uint160,uint160,uint256,uint256,uint256[],(bytes32,bytes32[],uint16))\":{\"details\":\"Stateful verification of zero-knowledge proofs that checks      if the proof is valid and the issuer public key is active, and      for revocation checks if the the smt root matches.`proofReference` is needed to check proofs that were part of a multi-proof submission.The trust relationship between the credential and issuer is binded by      the public key ID:      credential <--- signed by ---- publikc key <--- authroized by ---- issuer      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,      However, note that it does not mean that the credential is directly generated by the issuer.\"},\"verifyProofStatic(uint160,uint160,uint256,uint256,uint256[])\":{\"details\":\"static verification of zero-knowledge proofs that only checks if the proof is valid.Code duplication is deliberate for clear separation of concerns.\"},\"verifyProofStaticFromMultiProof(uint160,uint160,uint256,uint256,uint256[],(bytes32,bytes32[],uint16))\":{\"details\":\"static verification of zero-knowledge proofs that only checks if the proof is valid.`proofReference` is needed to check proofs that were part of a multi-proof submission.Code duplication is deliberate for clear separation of concerns.\"}},\"stateVariables\":{\"_issuerRegistry\":{\"details\":\"issuer registry\"},\"_typeRegistry\":{\"details\":\"type registry\"},\"_upaVerifier\":{\"details\":\"aggregated proof verifier\"}},\"title\":\"AggregatedBabyzkStatefulVerifier\",\"version\":1},\"userdoc\":{\"events\":{\"IssuerRegistryUpdated(address,address)\":{\"notice\":\"Emitted when the IssuerRegistry is updated.\"},\"TypeRegistryUpdated(address,address)\":{\"notice\":\"Emitted when the TypeRegistry is updated.\"},\"UpaVerifierUpdated(address,address)\":{\"notice\":\"Emitted when the UpaVerifier is updated.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"@dev AggregatedBabyzkStatefulVerifier is a contract that does on-chain stateful verification of zero-knowledge proofs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/babyzk/AggregatedStatefulProofVerifier.sol\":\"AggregatedBabyzkStatefulVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/babyzk/AggregatedStatefulProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IPublicSignalGetter, IntrinsicSignalName } from \\\"../interfaces/IPublicSignalGetter.sol\\\";\\nimport { IProofVerifier } from \\\"../interfaces/IProofVerifier.sol\\\";\\nimport { IIssuerRegistry } from \\\"../interfaces/IIssuerRegistry.sol\\\";\\nimport { ITypeRegistry } from \\\"../interfaces/ITypeRegistry.sol\\\";\\nimport { IAggregatedStatefulVerifier, VerifyResult } from \\\"../interfaces/IAggregatedStatefulVerifier.sol\\\";\\nimport { IUpaVerifier, ProofReference } from \\\"../interfaces/IUpaVerifier.sol\\\";\\n\\n/// @title AggregatedBabyzkStatefulVerifier\\n/// @notice\\n/// @dev AggregatedBabyzkStatefulVerifier is a contract that does on-chain stateful verification of zero-knowledge proofs.\\ncontract AggregatedBabyzkStatefulVerifier is IAggregatedStatefulVerifier, Ownable {\\n    error InvalidArgument(string message);\\n\\n    // constants\\n    uint8 public constant STACK_ID = 1;\\n\\n    /// @dev aggregated proof verifier\\n    IUpaVerifier private _upaVerifier;\\n\\n    /// @dev type registry\\n    ITypeRegistry private _typeRegistry;\\n\\n    /// @dev issuer registry\\n    IIssuerRegistry private _issuerRegistry;\\n\\n    /// @dev BabyzkVerifier constructor\\n    /// @param typeRegistry type registry contract\\n    /// @param issuerRegistry issuer registry contract\\n    constructor(IUpaVerifier upaVerifier, ITypeRegistry typeRegistry, IIssuerRegistry issuerRegistry, address admin) {\\n        _upaVerifier = upaVerifier;\\n        _typeRegistry = typeRegistry;\\n        _issuerRegistry = issuerRegistry;\\n        transferOwnership(admin);\\n    }\\n\\n    /// @dev static verification of zero-knowledge proofs that only checks if the proof is valid.\\n    /// @dev Code duplication is deliberate for clear separation of concerns.\\n    function verifyProofStatic(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 keyId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals\\n    ) external view override returns (VerifyResult) {\\n        // static validation\\n        VerifyResult staticValidationResult = _staticValidation(typeId, contextId, keyId, publicSignals);\\n        if (staticValidationResult != VerifyResult.OK) {\\n            return staticValidationResult;\\n        }\\n\\n        // verify public signals against circuit ID on upa verifier.\\n        bool verified = _upaVerifier.isVerified(circuitId, publicSignals);\\n        if (!verified) {\\n            return VerifyResult.PROOF_INVALID;\\n        }\\n\\n        // checks if the public signals are aliased. Proof aggregators do not check for signal aliasing.\\n        IProofVerifier verifier = _typeRegistry.getVerifier(typeId, STACK_ID);\\n        if (verifier.isAliased(publicSignals)) {\\n            return VerifyResult.ALIASED_SIGNAL;\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    /// @dev static verification of zero-knowledge proofs that only checks if the proof is valid.\\n    /// @dev `proofReference` is needed to check proofs that were part of a multi-proof submission.\\n    /// @dev Code duplication is deliberate for clear separation of concerns.\\n    function verifyProofStaticFromMultiProof(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 keyId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals,\\n        ProofReference calldata proofReference\\n    ) external view override returns (VerifyResult) {\\n        // static validation\\n        VerifyResult staticValidationResult = _staticValidation(typeId, contextId, keyId, publicSignals);\\n        if (staticValidationResult != VerifyResult.OK) {\\n            return staticValidationResult;\\n        }\\n\\n        // verify public signals against circuit ID on upa verifier.\\n        bool verified = _upaVerifier.isVerified(circuitId, publicSignals, proofReference);\\n        if (!verified) {\\n            return VerifyResult.PROOF_INVALID;\\n        }\\n\\n        // checks if the public signals are aliased. Proof aggregators do not check for signal aliasing.\\n        IProofVerifier verifier = _typeRegistry.getVerifier(typeId, STACK_ID);\\n        if (verifier.isAliased(publicSignals)) {\\n            return VerifyResult.ALIASED_SIGNAL;\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    function _staticValidation(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 keyId,\\n        uint256[] calldata publicSignals\\n    ) internal view returns (VerifyResult) {\\n        if (!_typeRegistry.isTypeFullyInitializedForStack(typeId, STACK_ID)) {\\n            return VerifyResult.TYPE_UNINITIALIZED;\\n        }\\n\\n        IPublicSignalGetter psGetter = _typeRegistry.getPublicSignalGetter(typeId, STACK_ID);\\n\\n        // type matches\\n        if (typeId != psGetter.getPublicSignal(uint8(IntrinsicSignalName.TYPE), publicSignals)) {\\n            return VerifyResult.TYPE_ID_MISMATCH;\\n        }\\n\\n        // context matches\\n        if (contextId != psGetter.getPublicSignal(uint8(IntrinsicSignalName.CONTEXT), publicSignals)) {\\n            return VerifyResult.CONTEXT_ID_MISMATCH;\\n        }\\n\\n        // keyID matches\\n        if (keyId != psGetter.getPublicSignal(uint8(IntrinsicSignalName.KEY_ID), publicSignals)) {\\n            return VerifyResult.PUBKEY_INACTIVE;\\n        }\\n\\n        // proof is valid only if its expiration lower bound is not exceeded.\\n        {\\n            uint256 expiration = psGetter.getPublicSignal(uint8(IntrinsicSignalName.EXPIRATION_LB), publicSignals);\\n            if (expiration < block.timestamp) {\\n                return VerifyResult.EXPIRED;\\n            }\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    /// @dev Stateful verification of zero-knowledge proofs that checks\\n    ///      if the proof is valid and the issuer public key is active, and\\n    ///      for revocation checks if the the smt root matches.\\n    /// @dev The trust relationship between the credential and issuer is binded by\\n    ///      the public key ID:\\n    ///      credential <--- signed by ---- publikc key <--- authroized by ---- issuer\\n    ///      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,\\n    ///      However, note that it does not mean that the credential is directly generated by the issuer.\\n    function verifyProofFull(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals\\n    ) external view override returns (VerifyResult) {\\n        VerifyResult fullValidationResult = _fullValidation(typeId, contextId, issuerId, publicSignals);\\n        if (fullValidationResult != VerifyResult.OK) {\\n            return fullValidationResult;\\n        }\\n\\n        // verify public signals against circuit ID on upa verifier.\\n        bool verified = _upaVerifier.isVerified(circuitId, publicSignals);\\n        if (!verified) {\\n            return VerifyResult.PROOF_INVALID;\\n        }\\n\\n        // checks if the public signals are aliased. Proof aggregators do not check for signal aliasing.\\n        IProofVerifier verifier = _typeRegistry.getVerifier(typeId, STACK_ID);\\n        if (verifier.isAliased(publicSignals)) {\\n            return VerifyResult.ALIASED_SIGNAL;\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    /// @dev Stateful verification of zero-knowledge proofs that checks\\n    ///      if the proof is valid and the issuer public key is active, and\\n    ///      for revocation checks if the the smt root matches.\\n    /// @dev `proofReference` is needed to check proofs that were part of a multi-proof submission.\\n    /// @dev The trust relationship between the credential and issuer is binded by\\n    ///      the public key ID:\\n    ///      credential <--- signed by ---- publikc key <--- authroized by ---- issuer\\n    ///      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,\\n    ///      However, note that it does not mean that the credential is directly generated by the issuer.\\n    function verifyProofFullFromMultiProof(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals,\\n        ProofReference calldata proofReference\\n    ) external view override returns (VerifyResult) {\\n        VerifyResult fullValidationResult = _fullValidation(typeId, contextId, issuerId, publicSignals);\\n        if (fullValidationResult != VerifyResult.OK) {\\n            return fullValidationResult;\\n        }\\n\\n        // verify public signals against circuit ID on upa verifier.\\n        bool verified = _upaVerifier.isVerified(circuitId, publicSignals, proofReference);\\n        if (!verified) {\\n            return VerifyResult.PROOF_INVALID;\\n        }\\n\\n        // checks if the public signals are aliased. Proof aggregators do not check for signal aliasing.\\n        IProofVerifier verifier = _typeRegistry.getVerifier(typeId, STACK_ID);\\n        if (verifier.isAliased(publicSignals)) {\\n            return VerifyResult.ALIASED_SIGNAL;\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    function _fullValidation(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        uint256[] calldata publicSignals\\n    ) internal view returns (VerifyResult) {\\n        if (!_typeRegistry.isTypeFullyInitializedForStack(typeId, STACK_ID)) {\\n            return VerifyResult.TYPE_UNINITIALIZED;\\n        }\\n\\n        IPublicSignalGetter psGetter = _typeRegistry.getPublicSignalGetter(typeId, STACK_ID);\\n\\n        // type matches\\n        if (typeId != psGetter.getPublicSignal(uint8(IntrinsicSignalName.TYPE), publicSignals)) {\\n            return VerifyResult.TYPE_ID_MISMATCH;\\n        }\\n\\n        // context matches\\n        if (contextId != psGetter.getPublicSignal(uint8(IntrinsicSignalName.CONTEXT), publicSignals)) {\\n            return VerifyResult.CONTEXT_ID_MISMATCH;\\n        }\\n\\n        // proof is valid only if the issuer public key is still active.\\n        {\\n            uint256 keyId = psGetter.getPublicSignal(uint8(IntrinsicSignalName.KEY_ID), publicSignals);\\n            if (!_issuerRegistry.isPublicKeyActiveForStack(issuerId, keyId, STACK_ID)) {\\n                return VerifyResult.PUBKEY_INACTIVE;\\n            }\\n        }\\n\\n        // proof is valid only if its expiration lower bound is not exceeded.\\n        {\\n            uint256 expiration = psGetter.getPublicSignal(uint8(IntrinsicSignalName.EXPIRATION_LB), publicSignals);\\n            if (expiration < block.timestamp) {\\n                return VerifyResult.EXPIRED;\\n            }\\n        }\\n\\n        // proof is valid only if the smt root matches for revocable credentials.\\n        if (_typeRegistry.isRevocable(typeId)) {\\n            uint256 root = psGetter.getPublicSignal(uint8(IntrinsicSignalName.SIG_REVOCATION_SMT_ROOT), publicSignals);\\n            uint256 currentRoot = uint256(_issuerRegistry.getSignatureStateRoot(typeId, contextId, issuerId));\\n            if (currentRoot != root) {\\n                return VerifyResult.SIG_REVOCATION_SMT_ROOT_MISMATCH;\\n            }\\n        }\\n\\n        return VerifyResult.OK;\\n    }\\n\\n    /// @dev return the type registry\\n    function getTypeRegistry() external view override returns (ITypeRegistry) {\\n        return _typeRegistry;\\n    }\\n\\n    /// @dev update the type registry\\n    function updateTypeRegistry(ITypeRegistry typeRegistry) external onlyOwner {\\n        if (typeRegistry == ITypeRegistry(address(0))) {\\n            revert InvalidArgument(\\\"typeRegistry is zero address\\\");\\n        }\\n        emit TypeRegistryUpdated(_typeRegistry, typeRegistry);\\n        _typeRegistry = typeRegistry;\\n    }\\n\\n    /// @dev return the issuer registry\\n    function getIssuerRegistry() external view override returns (IIssuerRegistry) {\\n        return _issuerRegistry;\\n    }\\n\\n    /// @dev update the issuer registry\\n    function updateIssuerRegistry(IIssuerRegistry issuerRegistry) external onlyOwner {\\n        if (issuerRegistry == IIssuerRegistry(address(0))) {\\n            revert InvalidArgument(\\\"issuerRegistry is zero address\\\");\\n        }\\n        emit IssuerRegistryUpdated(_issuerRegistry, issuerRegistry);\\n        _issuerRegistry = issuerRegistry;\\n    }\\n\\n    /// @dev return the upa verifier\\n    function getUpaVerifier() external view override returns (IUpaVerifier) {\\n        return _upaVerifier;\\n    }\\n\\n    /// @dev update the upa verifier\\n    function updateUpaVerifier(IUpaVerifier upaVerifier) external onlyOwner {\\n        if (upaVerifier == IUpaVerifier(address(0))) {\\n            revert InvalidArgument(\\\"upaVerifier is zero address\\\");\\n        }\\n        emit UpaVerifierUpdated(_upaVerifier, upaVerifier);\\n        _upaVerifier = upaVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x8cf548da90501275906c208f8cac9dad1b3fb5a5be92521168b6255bd0e95577\",\"license\":\"MIT\"},\"contracts/interfaces/IAggregatedStatefulVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IIssuerRegistry } from \\\"./IIssuerRegistry.sol\\\";\\nimport { ITypeRegistry } from \\\"./ITypeRegistry.sol\\\";\\nimport { ProofReference, IUpaVerifier } from \\\"./IUpaVerifier.sol\\\";\\n\\n/// @title VerifyResult\\n/// @notice Enum representing the possible results of a proof verification.\\n/// Only the OK result indicates a successful verification.\\nenum VerifyResult {\\n    OK,\\n    TYPE_UNINITIALIZED,\\n    TYPE_ID_MISMATCH,\\n    CONTEXT_ID_MISMATCH,\\n    PUBKEY_INACTIVE,\\n    SIG_REVOCATION_SMT_ROOT_MISMATCH,\\n    PROOF_INVALID,\\n    EXPIRED,\\n    ALIASED_SIGNAL,\\n    UNKNOWN_ERROR\\n}\\n\\n/// @title IAggregatedStatefulVerifier\\n/// @notice Interface for the AggregatedStatefulVerifier contract which handles on-chain stateful verification of zero-knowledge proofs\\n/// with proof aggregator.\\ninterface IAggregatedStatefulVerifier {\\n    /// @notice Emitted when the TypeRegistry is updated.\\n    /// @param oldTypeRegistry The address of the old TypeRegistry.\\n    /// @param newTypeRegistry The address of the new TypeRegistry.\\n    event TypeRegistryUpdated(ITypeRegistry oldTypeRegistry, ITypeRegistry newTypeRegistry);\\n\\n    /// @notice Emitted when the IssuerRegistry is updated.\\n    /// @param oldIssuerRegistry The address of the old IssuerRegistry.\\n    /// @param newIssuerRegistry The address of the new IssuerRegistry.\\n    event IssuerRegistryUpdated(IIssuerRegistry oldIssuerRegistry, IIssuerRegistry newIssuerRegistry);\\n\\n    /// @notice Emitted when the UpaVerifier is updated.\\n    /// @param oldUpaVerifier The address of the old UpaVerifier.\\n    /// @param newUpaVerifier The address of the new UpaVerifier.\\n    event UpaVerifierUpdated(IUpaVerifier oldUpaVerifier, IUpaVerifier newUpaVerifier);\\n\\n    /// @notice Performs static verification of zero-knowledge proofs.\\n    /// @param typeId The type ID of the proof to verify.\\n    /// @param contextId The context ID of the proof to verify.\\n    /// @param keyId The key ID associated with the proof.\\n    /// @param circuitId The circuit ID for proof aggregator.\\n    /// @param publicSignals An array containing the public signals data.\\n    /// @return A value from the VerifyResult enum representing the verification result.\\n    function verifyProofStatic(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 keyId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals\\n    ) external view returns (VerifyResult);\\n\\n    /// @notice Performs static verification of zero-knowledge proofs.\\n    /// @param typeId The type ID of the proof to verify.\\n    /// @param contextId The context ID of the proof to verify.\\n    /// @param keyId The key ID associated with the proof.\\n    /// @param circuitId The circuit ID for proof aggregator.\\n    /// @param publicSignals An array containing the public signals data.\\n    /// @param proofReference Reference to proofs that were part of a multi-proof submission.\\n    /// @return A value from the VerifyResult enum representing the verification result.\\n    function verifyProofStaticFromMultiProof(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 keyId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals,\\n        ProofReference calldata proofReference\\n    ) external view returns (VerifyResult);\\n\\n    /// @notice Performs full verification of zero-knowledge proofs, including issuer public key activity and revocation checks.\\n    /// @param typeId The type ID of the proof to verify.\\n    /// @param contextId The context ID of the proof to verify.\\n    /// @param issuerId The issuer ID associated with the proof.\\n    /// @param circuitId The circuit ID for proof aggregator.\\n    /// @param publicSignals An array containing the public signals data.\\n    /// @return A value from the VerifyResult enum representing the verification result.\\n    function verifyProofFull(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals\\n    ) external view returns (VerifyResult);\\n\\n    /// @notice Performs full verification of zero-knowledge proofs, including issuer public key activity and revocation checks.\\n    /// @param typeId The type ID of the proof to verify.\\n    /// @param contextId The context ID of the proof to verify.\\n    /// @param issuerId The issuer ID associated with the proof.\\n    /// @param circuitId The circuit ID for proof aggregator.\\n    /// @param publicSignals An array containing the public signals data.\\n    /// @param proofReference Reference to proofs that were part of a multi-proof submission.\\n    /// @return A value from the VerifyResult enum representing the verification result.\\n    function verifyProofFullFromMultiProof(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        uint256 circuitId,\\n        uint256[] calldata publicSignals,\\n        ProofReference calldata proofReference\\n    ) external view returns (VerifyResult);\\n\\n    /// @notice Returns the current TypeRegistry address.\\n    /// @return The address of the TypeRegistry.\\n    function getTypeRegistry() external view returns (ITypeRegistry);\\n\\n    /// @notice Returns the current IssuerRegistry address.\\n    /// @return The address of the IssuerRegistry.\\n    function getIssuerRegistry() external view returns (IIssuerRegistry);\\n\\n    /// @notice Returns the current UpaVerifier address.\\n    /// @return The address of the UpaVerifier.\\n    function getUpaVerifier() external view returns (IUpaVerifier);\\n}\\n\",\"keccak256\":\"0xab09eccd2e02752adfa24a29e73caeee8680d0583707274fa4b53ff5fe4ab6d7\",\"license\":\"MIT\"},\"contracts/interfaces/IIssuerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @dev The status of the public key, only active public key can be used for verification.\\nenum PublicKeyStatus {\\n    UNINITIALIZED,\\n    REVOKED,\\n    ACTIVE\\n}\\n\\n/// @dev The public key struct\\nstruct PublicKey {\\n    /// @dev the verification stack id that the public key is enabled for.\\n    mapping(uint8 => bool) enabledVerificationStacks;\\n    /// @dev the status of the public key\\n    PublicKeyStatus status;\\n    /// @dev the raw bytes of the public key. Not used in the contract, only for off-chain usage.\\n    /// The spec for marshalling the public key is defined by the issuer.\\n    bytes raw;\\n}\\n\\n/// @dev The revoked signature ID in a sparsed merkle tree.\\nstruct SignatureState {\\n    /// @dev the root hash of the sparsed merkle tree.\\n    bytes32 root;\\n    /// @dev uri to the sparsed merkle tree, representing the revoked signature ids.\\n    string treeURI;\\n}\\n\\n/// @dev The issuer struct\\nstruct Issuer {\\n    /// @dev the name of the issuer\\n    string name;\\n    /// @dev the admin of the issuer, who can add or revoke public keys.\\n    address admin;\\n}\\n\\n/// @title IIssuerRegistry\\n/// @dev The interface for the issuer registry contract.\\ninterface IIssuerRegistry {\\n    /// @notice Emitted when a new issuer is registered in the registry.\\n    /// @param issuerId Unique identifier for the newly registered issuer.\\n    /// @param name Name of the issuer registered.\\n    event IssuerRegistered(uint256 indexed issuerId, string name);\\n\\n    /// @notice Emitted when an issuer's administrative role is transferred to a new address.\\n    /// @param issuerId ID of issuer whose admin is being transferred.\\n    /// @param oldAdmin Address of the current admin being replaced.\\n    /// @param newAdmin Address of the new admin taking over.\\n    event IssuerAdminTransferred(uint256 indexed issuerId, address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @notice Emitted when the status of a public key is updated.\\n    /// @param issuerId ID for the issuer to whom the public key belongs.\\n    /// @param publicKeyId ID for the public key being updated.\\n    /// @param status New status of the public key.\\n    event PublicKeyStatusUpdated(uint256 indexed issuerId, uint256 indexed publicKeyId, PublicKeyStatus status);\\n\\n    /// @notice Emitted when the verification stack for a public key is updated.\\n    /// @param issuerId Unique identifier for the issuer to whom the public key belongs.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @param verificationStackId Identifier for the verification stack being updated.\\n    /// @param enabled Boolean indicating whether the stack is enabled or disabled for the public key.\\n    event PublicKeyVerificationStackUpdated(\\n        uint256 indexed issuerId,\\n        uint256 indexed publicKeyId,\\n        uint256 indexed verificationStackId,\\n        bool enabled\\n    );\\n\\n    /// @notice Emitted when the signature state URI is updated for a specific type and context.\\n    /// @param typeId Type identifier for the signature state being updated.\\n    /// @param contextID Context identifier for the signature state being updated.\\n    /// @param issuerId Issuer identifier related to the signature state.\\n    /// @param newTreeURI New URI for the signature state tree.\\n    event SignatureStateURIUpdated(\\n        uint160 indexed typeId,\\n        uint160 indexed contextID,\\n        uint256 indexed issuerId,\\n        string newTreeURI\\n    );\\n\\n    /// @notice Emitted when the signature state root is updated for a specific type and context.\\n    /// @param typeId Type identifier for the signature state being updated.\\n    /// @param contextID Context identifier for the signature state being updated.\\n    /// @param issuerId Issuer identifier related to the signature state.\\n    /// @param newRoot New root hash for the signature state tree.\\n    event SignatureStateRootUpdated(\\n        uint160 indexed typeId,\\n        uint160 indexed contextID,\\n        uint256 indexed issuerId,\\n        bytes32 newRoot\\n    );\\n\\n    /// @dev Registers a new issuer along with their first public key and enabled verification stack.\\n    /// @param name Name of the issuer to register.\\n    /// @param verificationStackId Identifier for the verification stack.\\n    /// @param publicKeyId  Identifier for the issuer's public key.\\n    /// @param publicKeyRaw The raw public key data.\\n    /// @return The unique identifier for the newly registered issuer.\\n    function registerIssuer(\\n        string calldata name,\\n        uint8 verificationStackId,\\n        uint256 publicKeyId,\\n        bytes calldata publicKeyRaw\\n    ) external returns (uint256);\\n\\n    /// @dev Transfers the administrative role of an issuer to a new owner.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param newOwner Address of the new administrator.\\n    function transferIssuerAdmin(uint256 issuerId, address newOwner) external;\\n\\n    /// @dev Adds a new public key for an issuer and enables it for a specified verification stack.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param verificationStackId Identifier for the verification stack.\\n    /// @param publicKeyId Unique identifier for the new public key.\\n    /// @param publicKeyRaw The raw public key data.\\n    function addPublicKey(\\n        uint256 issuerId,\\n        uint8 verificationStackId,\\n        uint256 publicKeyId,\\n        bytes calldata publicKeyRaw\\n    ) external;\\n\\n    /// @dev Updates the status (active/revoked) of an issuer's public key.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @param status New status for the public key.\\n    // only the issuer admin can call this function\\n    function updatePublicKeyStatus(uint256 issuerId, uint256 publicKeyId, PublicKeyStatus status) external;\\n\\n    /// @dev Updates the verification stack association for an issuer's public key.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @param verificationStackId New verification stack identifier for the public key.\\n    /// @param enabled Boolean indicating whether the stack is enabled for the public key.\\n    function updatePublicKeyVerificationStack(\\n        uint256 issuerId,\\n        uint256 publicKeyId,\\n        uint8 verificationStackId,\\n        bool enabled\\n    ) external;\\n\\n    /// @dev Updates the signature state URI for a given type and context.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param treeURI New URI for the signature state.\\n    function updateSignatureStateURI(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        string calldata treeURI\\n    ) external;\\n\\n    /// @dev Updates the signature SMT root for a given type, context and issuer.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param root New root hash for the revoked SMT.\\n    function updateSignatureState(uint160 typeId, uint160 contextId, uint256 issuerId, bytes32 root) external;\\n\\n    /// @dev Sets both the signature SMT URI and root for a given type, context and issuer.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param treeURI New URI for the signature state.\\n    /// @param root New root hash for the signature state.\\n    function setSignatureState(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId,\\n        string calldata treeURI,\\n        bytes32 root\\n    ) external;\\n\\n    /// @dev Retrieves the issuer data, reverts if the issuer does not exist.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @return Issuer data structure containing issuer details.\\n    function getIssuer(uint256 issuerId) external view returns (Issuer memory);\\n\\n    /// @dev Retrieves the raw public key data for an issuer's public key.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @return The raw public key data.\\n    function getPublicKeyRaw(uint256 issuerId, uint256 publicKeyId) external view returns (bytes memory);\\n\\n    /// @dev Checks if an issuer's public key is active.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @return True if the public key is active, false otherwise.\\n    function isPublicKeyActive(uint256 issuerId, uint256 publicKeyId) external view returns (bool);\\n\\n    /// @dev Checks if an issuer's public key is active and enabled for a specific verification stack.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @param publicKeyId Unique identifier for the public key.\\n    /// @param verificationStackId Identifier for the verification stack.\\n    /// @return True if the public key is active and enabled for the stack, false otherwise.\\n    function isPublicKeyActiveForStack(\\n        uint256 issuerId,\\n        uint256 publicKeyId,\\n        uint8 verificationStackId\\n    ) external view returns (bool);\\n\\n    /// @dev Retrieves the signature state for a given type, context and issuer.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @return The signature state.\\n    function getSignatureState(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId\\n    ) external view returns (SignatureState memory);\\n\\n    /// @dev Retrieves the signature state URI for a given type, context and issuer.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @return The URI of the signature state.\\n    function getSignatureStateURI(\\n        uint160 typeId,\\n        uint160 contextId,\\n        uint256 issuerId\\n    ) external view returns (string memory);\\n\\n    /// @dev Retrieves the signature state root for a given type, context and issuer.\\n    /// @param typeId Type identifier.\\n    /// @param contextId Context identifier.\\n    /// @param issuerId Unique identifier for the issuer.\\n    /// @return The root hash of the signature state.\\n    function getSignatureStateRoot(uint160 typeId, uint160 contextId, uint256 issuerId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec472bdee80280b790f226a9526cdea5a618e65881858317b40fba1a9893932b\",\"license\":\"MIT\"},\"contracts/interfaces/IProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title IProofVerifier\\n/// @dev Interface for static verification of zero-knowledge proofs.\\ninterface IProofVerifier {\\n    /// @notice Retrieves the verification keys.\\n    /// @dev This function is used to get the verification keys that are necessary for verifying proofs.\\n    /// @return An array of `uint` representing the verification keys.\\n    function getVerificationKeys() external view returns (uint256[] memory);\\n\\n    /// @dev Checks if the public signals are aliased. Aliased signals should never be used in proofs.\\n    ///      This is useful when using proof aggregators that does not check for signal aliasing.\\n    /// @param _pubSignals An array of `uint` representing the public signals.\\n    /// @return A boolean value indicating if any public signal is aliased (`true`) or not (`false`).\\n    function isAliased(uint256[] calldata _pubSignals) external view returns (bool);\\n\\n    /// @dev This function takes a cryptographic proof and public signals to verify the proof's validity.\\n    /// @notice It verifies the proof and check if public signals were aliased.\\n    /// @param _proofs An array of `uint` representing the proof.\\n    /// @param _pubSignals An array of `uint` representing the public signals.\\n    /// @return A boolean value indicating whether the proof is valid (`true`) or not (`false`).\\n    function verifyProof(uint256[] calldata _proofs, uint256[] calldata _pubSignals) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcf34af8efbb65237c2a47fd421e615cec850b19f9647fc2087c2a034d319b7be\",\"license\":\"MIT\"},\"contracts/interfaces/IPublicSignalGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Intrinsic Signal enum\\nenum IntrinsicSignalName {\\n    TYPE,\\n    CONTEXT,\\n    NULLIFIER,\\n    EXTERNAL_NULLIFIER,\\n    REVEAL_IDENTITY,\\n    EXPIRATION_LB,\\n    KEY_ID,\\n    ID_EQUALS_TO,\\n    SIG_REVOCATION_SMT_ROOT\\n}\\n\\n/// @title Public Signal Getter Interface\\n/// @dev Public signals (inputs) are represented as an array of uints in galxe identity protocol.\\n///      To find the public signal for a given signal name, type designer should set a contract\\n///      in the type registry that implements this interface.\\ninterface IPublicSignalGetter {\\n    /// @dev get the public signal for the signal name, represented as the given enum (represented as uint8), based on the public signals.\\n    /// @notice Implementation must be able to handle intrinsic signals, defiend in IntrinsicSignalName enum.\\n    ///         Type-specific signals support is optional.\\n    /// @param name The signal name, represented as the given enum (converted to uint8).\\n    /// @param publicSignals The public signals.\\n    function getPublicSignal(uint8 name, uint256[] calldata publicSignals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfdfd996ad88b94d59f07e0ef67a2e6091ccd03a25c395fe53fb1e83770d99b2\",\"license\":\"MIT\"},\"contracts/interfaces/ITypeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IProofVerifier } from \\\"./IProofVerifier.sol\\\";\\nimport { IPublicSignalGetter } from \\\"./IPublicSignalGetter.sol\\\";\\n\\n/// @title Credential Type\\n/// @dev Defines the structure of a credential type.\\nstruct CredentialType {\\n    // @dev This flag indicates if the credential type support revocation.\\n    bool revocable;\\n    // @dev The address of the admin of the credential type, initially set to the creator.\\n    address admin;\\n    // @dev Provides a human-readable identifier for the credential.\\n    string name;\\n    // @dev The type specification of Galxe Identity Credential Type Schema.\\n    string definition;\\n    // @dev Additional context or information about the type.\\n    string description;\\n    // @dev A URI to an external JSON file of more information about the credential.\\n    // See whitepaper for the JSON schema specification.\\n    string resourceURI;\\n}\\n\\n/// @title Credential Type Config, miscellanous.\\n/// @notice To save stack space, we use this struct to store the verifier and public signal getter.\\nstruct CredentialTypeMiscConfig {\\n    bool revocable;\\n    uint8 verificationStackId;\\n    IProofVerifier verifier;\\n    IPublicSignalGetter publicSignalGetter;\\n}\\n\\n/// @title Interface for Type Registration Contract\\n/// @notice This interface defines the functions for registering and managing types by users.\\ninterface ITypeRegistry {\\n    /// @dev Emitted when a new type is registered\\n    /// @param typeID Unique identifier for the registered type\\n    /// @param admin Address of the admin of the type.\\n    /// @param name Name of the type\\n    /// @param definition Immutable definition of the type\\n    /// @param description Immutable description of the type\\n    /// @param resourceURI Mutable resource URI for the type\\n    event TypeRegistered(\\n        uint160 indexed typeID,\\n        address indexed admin,\\n        string name,\\n        string definition,\\n        string description,\\n        string resourceURI\\n    );\\n\\n    /// @dev Emitted when the resource URI of a type is updated\\n    /// @param typeID Unique identifier for the type being updated\\n    /// @param oldResourceURI The previous resource URI\\n    /// @param newResourceURI The new resource URI\\n    event TypeResourceURIUpdated(uint160 indexed typeID, string oldResourceURI, string newResourceURI);\\n\\n    /// @dev Emitted when a proof verifier is updated for a type\\n    /// @param typeID type id\\n    /// @param verificationStackID verification stack id\\n    /// @param verifier address of the verifier\\n    event TypeVerifierUpdated(uint160 indexed typeID, uint8 indexed verificationStackID, address indexed verifier);\\n\\n    /// @dev Emitted when the intrinsic signal indexes are updated for a type\\n    /// @param typeID type id\\n    /// @param verificationStackID verification stack id\\n    /// @param publicSignalGetter  address of the public signal getter\\n    event TypePublicSignalGetterUpdated(\\n        uint160 indexed typeID,\\n        uint8 indexed verificationStackID,\\n        address indexed publicSignalGetter\\n    );\\n\\n    /// @dev Emitted when the admin of a type is transferred\\n    /// @param typeID type id\\n    /// @param oldAdmin address of the old admin\\n    /// @param newAdmin address of the new admin\\n    event TypeAdminTransferred(uint160 indexed typeID, address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @dev transfer the ownership of a type.\\n    /// @param typeId type id of the type\\n    /// @param newAdmin address of the new admin\\n    function transferTypeAdmin(uint160 typeId, address newAdmin) external;\\n\\n    /// @notice set a primitive type, only callable by the admin.\\n    /// @param typeId the type id of the primitive type\\n    /// @param name name of the type\\n    /// @param definition definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @param config revocable, verifier and public signal getter.\\n    function setPrimitiveType(\\n        uint160 typeId,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        CredentialTypeMiscConfig calldata config\\n    ) external;\\n\\n    /// @notice Register a new type by `msg.sender`\\n    /// @param name Type name\\n    /// @param definition Immutable type definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @return typeID Unique identifier of the registered type\\n    function registerType(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI\\n    ) external returns (uint160);\\n\\n    /// @notice Register a new type by `msg.sender` with verifier and public signal getter set for a specific verification stack.\\n    /// @param name Type name\\n    /// @param definition Immutable type definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @param verifier verifier for the type\\n    /// @param publicSignalGetter public signal getter for the type\\n    /// @return typeID Unique identifier of the registered type\\n    function registerType1Step(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        uint8 verificationStackId,\\n        IProofVerifier verifier,\\n        IPublicSignalGetter publicSignalGetter\\n    ) external returns (uint160);\\n\\n    /// @notice Update the resource URI of a type\\n    /// @dev Can only be called by the type owner (`msg.sender`)\\n    /// @param _id ID of the type to update\\n    /// @param _resourceURI New resource URI for the type\\n    function updateTypeResourceURI(uint160 _id, string calldata _resourceURI) external;\\n\\n    /// @dev update the verifier for a type\\n    function updateTypeVerifier(uint160 typeId, uint8 verificationStackId, IProofVerifier verifier) external;\\n\\n    /// @dev update the verifier for a type\\n    function updateTypePublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId,\\n        IPublicSignalGetter getter\\n    ) external;\\n\\n    /// @param typeId type id of the type\\n    /// @param verificationStackId verification stack id\\n    function getVerifier(uint160 typeId, uint8 verificationStackId) external view returns (IProofVerifier);\\n\\n    /// @param typeId type id of the type\\n    /// @param verificationStackId verification stack id\\n    function getPublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId\\n    ) external view returns (IPublicSignalGetter);\\n\\n    /// @dev check if the type is fully initialized for the given verification stack.\\n    /// @param typeId id of the type\\n    /// @param verificationStackId id the verification stack\\n    function isTypeFullyInitializedForStack(uint160 typeId, uint8 verificationStackId) external view returns (bool);\\n\\n    /// @dev Retrieve details of a type for the given typeID\\n    /// @param _id ID of the type to retrieve\\n    /// @return A `CredentialType` struct containing details of the type\\n    function getType(uint160 _id) external view returns (CredentialType memory);\\n\\n    /// @dev Retrieve the admin of a type\\n    /// @param typeId type id of the type\\n    /// @return address of the admin of the type\\n    function getTypeAdmin(uint160 typeId) external view returns (address);\\n\\n    /// @dev check if the type is revocable\\n    function isRevocable(uint160 typeId) external view returns (bool);\\n\\n    /// @notice Calculate the typeID of a type, typeID is keccak256(creator, name) in uint160.\\n    /// @param creator Address of the type creator\\n    /// @param name Name of the type\\n    /// @return The calculated typeID based on the creator address and type name\\n    function calcTypeID(address creator, string calldata name) external pure returns (uint160);\\n}\\n\",\"keccak256\":\"0x86d4db6288f762aecd0725e2d4c560b56e5792c0062d48f406e04807488d1878\",\"license\":\"MIT\"},\"contracts/interfaces/IUpaVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// Reference to a single proof in a Submission.  Used by clients to show that\\n/// a given proof appears in a submission which has been verified as part of\\n/// an aggregated proof.  Not required for single-proof submissions, since in\\n/// this case `submissionId == proofId`, and the `merkleProof` and `location`\\n/// are trivial.\\nstruct ProofReference {\\n    bytes32 submissionId;\\n    bytes32[] merkleProof;\\n    /// Index into the proofs in the submission.  The sequence of proofs\\n    /// within the submission starts at this index.\\n    uint16 location;\\n}\\n\\n/// @title IUpaVerifier interface\\n/// @notice Any UPA that supports this interface can be used by the AggregatedStatefulVerifier contract.\\ninterface IUpaVerifier {\\n    // Checks if UPA has verified a proof that publicInputs is valid for\\n    // the circuit `circuitId`.\\n    function isVerified(uint256 circuitId, uint256[] calldata publicInputs) external view returns (bool);\\n\\n    // Checks if UPA has verified a proof that publicInputs is valid for\\n    // the circuit `circuitId`, where the proof belongs to a multi-proof\\n    // submission.\\n    function isVerified(\\n        uint256 circuitId,\\n        uint256[] calldata publicInputs,\\n        ProofReference calldata proofReference\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6b223d85de068a986b85fb22d378afe91329d64304d3e5f02fe87c1c16cf15a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638cf8d6651161008c578063a4cacacf11610066578063a4cacacf146101c6578063b29b86af146101d9578063bfda0d1e146101f3578063f2fde38b1461020657600080fd5b80638cf8d665146101915780638da5cb5b146101a25780639d21902f146101b357600080fd5b806345110d9c116100c857806345110d9c146101525780634b718b8c1461016557806354207d4c14610178578063715018a61461018957600080fd5b8063151c290d146100ef5780631a7d10f1146101185780632a9718241461012d575b600080fd5b6101026100fd36600461122b565b610219565b60405161010f91906112bd565b60405180910390f35b61012b6101263660046112e5565b6103dd565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200161010f565b61012b6101603660046112e5565b6104aa565b61012b6101733660046112e5565b610572565b6002546001600160a01b031661013a565b61012b61063a565b6003546001600160a01b031661013a565b6000546001600160a01b031661013a565b6101026101c136600461122b565b61064e565b6101026101d4366004611309565b61065e565b6101e1600181565b60405160ff909116815260200161010f565b610102610201366004611309565b610826565b61012b6102143660046112e5565b610836565b60008061022988888887876108c6565b9050600081600981111561023f5761023f6112a7565b1461024b5790506103d3565b600154604051624deda960e81b81526000916001600160a01b031690634deda9009061027f908990899089906004016113fd565b602060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190611417565b9050806102d2576006925050506103d3565b600254604051631ef84f8560e31b81526001600160a01b038b8116600483015260016024830152600092169063f7c27c2890604401602060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103489190611439565b6040516332283b2760e11b81529091506001600160a01b03821690636450764e906103799089908990600401611456565b602060405180830381865afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190611417565b156103cb57600893505050506103d3565b600093505050505b9695505050505050565b6103e5610df5565b6001600160a01b03811661044157604051631fff1b3b60e21b815260206004820152601e60248201527f6973737565725265676973747279206973207a65726f2061646472657373000060448201526064015b60405180910390fd5b600354604080516001600160a01b03928316815291831660208301527fe7afd721c46f8367e6fde893fc343404fb8c91b32fe8fc440035458e37ae4444910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6104b2610df5565b6001600160a01b03811661050957604051631fff1b3b60e21b815260206004820152601b60248201527f7570615665726966696572206973207a65726f206164647265737300000000006044820152606401610438565b600154604080516001600160a01b03928316815291831660208301527fac7bc2cb089fa1fa6e98662a198ea7e40c6f02e09a6f0b7595d2123895b630a7910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b61057a610df5565b6001600160a01b0381166105d157604051631fff1b3b60e21b815260206004820152601c60248201527f747970655265676973747279206973207a65726f2061646472657373000000006044820152606401610438565b600254604080516001600160a01b03928316815291831660208301527f7eebb102f6399a39c5c44574c655f01fbeef3fcfc24732acbb2df1d608dee744910160405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b610642610df5565b61064c6000610e4f565b565b6000806102298888888787610e9f565b60008061066e89898988886108c6565b90506000816009811115610684576106846112a7565b1461069057905061081b565b600154604051636a872ed960e01b81526000916001600160a01b031690636a872ed9906106c7908a908a908a908a90600401611489565b602060405180830381865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611417565b90508061071a5760069250505061081b565b600254604051631ef84f8560e31b81526001600160a01b038c8116600483015260016024830152600092169063f7c27c2890604401602060405180830381865afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611439565b6040516332283b2760e11b81529091506001600160a01b03821690636450764e906107c1908a908a90600401611456565b602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190611417565b15610813576008935050505061081b565b600093505050505b979650505050505050565b60008061066e8989898888610e9f565b61083e610df5565b6001600160a01b0381166108ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610438565b6108c381610e4f565b50565b6002546040516373190ca560e01b81526001600160a01b0387811660048301526001602483015260009216906373190ca590604401602060405180830381865afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190611417565b61094857506001610dec565b600254604051637b4ed18560e01b81526001600160a01b038881166004830152600160248301526000921690637b4ed18590604401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190611439565b604051636277717560e11b81529091506001600160a01b0382169063c4eee2ea906109f2906000908890889060040161152f565b602060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a33919061154c565b876001600160a01b031614610a4c576002915050610dec565b604051636277717560e11b81526001600160a01b0382169063c4eee2ea90610a7d906001908890889060040161152f565b602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe919061154c565b866001600160a01b031614610ad7576003915050610dec565b604051636277717560e11b81526000906001600160a01b0383169063c4eee2ea90610b0b906006908990899060040161152f565b602060405180830381865afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c919061154c565b600354604051631f89dc0b60e11b81526004810189905260248101839052600160448201529192506001600160a01b031690633f13b81690606401602060405180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611417565b610bd757600492505050610dec565b50604051636277717560e11b81526000906001600160a01b0383169063c4eee2ea90610c0c906005908990899060040161152f565b602060405180830381865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d919061154c565b905042811015610c6257600792505050610dec565b506002546040516392b0a57f60e01b81526001600160a01b038981166004830152909116906392b0a57f90602401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190611417565b15610de657604051636277717560e11b81526000906001600160a01b0383169063c4eee2ea90610d0a906008908990899060040161152f565b602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b919061154c565b600354604051632deed10d60e21b81526001600160a01b038b811660048301528a81166024830152604482018a90529293506000929091169063b7bb443490606401602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061154c565b9050818114610de35760059350505050610dec565b50505b60009150505b95945050505050565b6000546001600160a01b0316331461064c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610438565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002546040516373190ca560e01b81526001600160a01b0387811660048301526001602483015260009216906373190ca590604401602060405180830381865afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f159190611417565b610f2157506001610dec565b600254604051637b4ed18560e01b81526001600160a01b038881166004830152600160248301526000921690637b4ed18590604401602060405180830381865afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190611439565b604051636277717560e11b81529091506001600160a01b0382169063c4eee2ea90610fcb906000908890889060040161152f565b602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c919061154c565b876001600160a01b031614611025576002915050610dec565b604051636277717560e11b81526001600160a01b0382169063c4eee2ea90611056906001908890889060040161152f565b602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611097919061154c565b866001600160a01b0316146110b0576003915050610dec565b604051636277717560e11b81526001600160a01b0382169063c4eee2ea906110e1906006908890889060040161152f565b602060405180830381865afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611122919061154c565b8514611132576004915050610dec565b604051636277717560e11b81526000906001600160a01b0383169063c4eee2ea90611166906005908990899060040161152f565b602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061154c565b9050428110156111bc57600792505050610dec565b506000979650505050505050565b6001600160a01b03811681146108c357600080fd5b60008083601f8401126111f157600080fd5b50813567ffffffffffffffff81111561120957600080fd5b6020830191508360208260051b850101111561122457600080fd5b9250929050565b60008060008060008060a0878903121561124457600080fd5b863561124f816111ca565b9550602087013561125f816111ca565b94506040870135935060608701359250608087013567ffffffffffffffff81111561128957600080fd5b61129589828a016111df565b979a9699509497509295939492505050565b634e487b7160e01b600052602160045260246000fd5b60208101600a83106112df57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156112f757600080fd5b8135611302816111ca565b9392505050565b600080600080600080600060c0888a03121561132457600080fd5b873561132f816111ca565b9650602088013561133f816111ca565b95506040880135945060608801359350608088013567ffffffffffffffff8082111561136a57600080fd5b6113768b838c016111df565b909550935060a08a013591508082111561138f57600080fd5b5088016060818b0312156113a257600080fd5b8091505092959891949750929550565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156113e457600080fd5b8260051b80836020870137939093016020019392505050565b838152604060208201526000610dec6040830184866113b2565b60006020828403121561142957600080fd5b8151801515811461130257600080fd5b60006020828403121561144b57600080fd5b8151611302816111ca565b60208152600061146a6020830184866113b2565b949350505050565b803561ffff8116811461148457600080fd5b919050565b8481526060602082015260006114a36060830185876113b2565b8281036040840152833581526020840135601e198536030181126114c657600080fd5b840160208101903567ffffffffffffffff8111156114e357600080fd5b8060051b36038213156114f557600080fd5b6060602084015261150a6060840182846113b2565b91505061151960408601611472565b61ffff8116604084015250979650505050505050565b60ff84168152604060208201526000610dec6040830184866113b2565b60006020828403121561155e57600080fd5b505191905056fea164736f6c6343000817000a",
  "devdoc": {
    "events": {
      "IssuerRegistryUpdated(address,address)": {
        "params": {
          "newIssuerRegistry": "The address of the new IssuerRegistry.",
          "oldIssuerRegistry": "The address of the old IssuerRegistry."
        }
      },
      "TypeRegistryUpdated(address,address)": {
        "params": {
          "newTypeRegistry": "The address of the new TypeRegistry.",
          "oldTypeRegistry": "The address of the old TypeRegistry."
        }
      },
      "UpaVerifierUpdated(address,address)": {
        "params": {
          "newUpaVerifier": "The address of the new UpaVerifier.",
          "oldUpaVerifier": "The address of the old UpaVerifier."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "BabyzkVerifier constructor",
        "params": {
          "issuerRegistry": "issuer registry contract",
          "typeRegistry": "type registry contract"
        }
      },
      "getIssuerRegistry()": {
        "details": "return the issuer registry"
      },
      "getTypeRegistry()": {
        "details": "return the type registry"
      },
      "getUpaVerifier()": {
        "details": "return the upa verifier"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateIssuerRegistry(address)": {
        "details": "update the issuer registry"
      },
      "updateTypeRegistry(address)": {
        "details": "update the type registry"
      },
      "updateUpaVerifier(address)": {
        "details": "update the upa verifier"
      },
      "verifyProofFull(uint160,uint160,uint256,uint256,uint256[])": {
        "details": "Stateful verification of zero-knowledge proofs that checks      if the proof is valid and the issuer public key is active, and      for revocation checks if the the smt root matches.The trust relationship between the credential and issuer is binded by      the public key ID:      credential <--- signed by ---- publikc key <--- authroized by ---- issuer      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,      However, note that it does not mean that the credential is directly generated by the issuer."
      },
      "verifyProofFullFromMultiProof(uint160,uint160,uint256,uint256,uint256[],(bytes32,bytes32[],uint16))": {
        "details": "Stateful verification of zero-knowledge proofs that checks      if the proof is valid and the issuer public key is active, and      for revocation checks if the the smt root matches.`proofReference` is needed to check proofs that were part of a multi-proof submission.The trust relationship between the credential and issuer is binded by      the public key ID:      credential <--- signed by ---- publikc key <--- authroized by ---- issuer      As long as the issuer set the public key ID to be active, the credential is trusted by the issuer,      However, note that it does not mean that the credential is directly generated by the issuer."
      },
      "verifyProofStatic(uint160,uint160,uint256,uint256,uint256[])": {
        "details": "static verification of zero-knowledge proofs that only checks if the proof is valid.Code duplication is deliberate for clear separation of concerns."
      },
      "verifyProofStaticFromMultiProof(uint160,uint160,uint256,uint256,uint256[],(bytes32,bytes32[],uint16))": {
        "details": "static verification of zero-knowledge proofs that only checks if the proof is valid.`proofReference` is needed to check proofs that were part of a multi-proof submission.Code duplication is deliberate for clear separation of concerns."
      }
    },
    "stateVariables": {
      "_issuerRegistry": {
        "details": "issuer registry"
      },
      "_typeRegistry": {
        "details": "type registry"
      },
      "_upaVerifier": {
        "details": "aggregated proof verifier"
      }
    },
    "title": "AggregatedBabyzkStatefulVerifier",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IssuerRegistryUpdated(address,address)": {
        "notice": "Emitted when the IssuerRegistry is updated."
      },
      "TypeRegistryUpdated(address,address)": {
        "notice": "Emitted when the TypeRegistry is updated."
      },
      "UpaVerifierUpdated(address,address)": {
        "notice": "Emitted when the UpaVerifier is updated."
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "@dev AggregatedBabyzkStatefulVerifier is a contract that does on-chain stateful verification of zero-knowledge proofs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/babyzk/AggregatedStatefulProofVerifier.sol:AggregatedBabyzkStatefulVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1831,
        "contract": "contracts/babyzk/AggregatedStatefulProofVerifier.sol:AggregatedBabyzkStatefulVerifier",
        "label": "_upaVerifier",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUpaVerifier)5380"
      },
      {
        "astId": 1835,
        "contract": "contracts/babyzk/AggregatedStatefulProofVerifier.sol:AggregatedBabyzkStatefulVerifier",
        "label": "_typeRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITypeRegistry)5343"
      },
      {
        "astId": 1839,
        "contract": "contracts/babyzk/AggregatedStatefulProofVerifier.sol:AggregatedBabyzkStatefulVerifier",
        "label": "_issuerRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IIssuerRegistry)4949"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IIssuerRegistry)4949": {
        "encoding": "inplace",
        "label": "contract IIssuerRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ITypeRegistry)5343": {
        "encoding": "inplace",
        "label": "contract ITypeRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IUpaVerifier)5380": {
        "encoding": "inplace",
        "label": "contract IUpaVerifier",
        "numberOfBytes": "20"
      }
    }
  }
}