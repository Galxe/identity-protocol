{
  "address": "0x77dA3Cf4418009D171B4963db815Ca46d6F2E79D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidTypeName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTypeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TypeAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TypeDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint160",
          "name": "typeID",
          "type": "uint160"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "TypeAdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint160",
          "name": "typeID",
          "type": "uint160"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "verificationStackID",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "publicSignalGetter",
          "type": "address"
        }
      ],
      "name": "TypePublicSignalGetterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint160",
          "name": "typeID",
          "type": "uint160"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "definition",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resourceURI",
          "type": "string"
        }
      ],
      "name": "TypeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint160",
          "name": "typeID",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldResourceURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newResourceURI",
          "type": "string"
        }
      ],
      "name": "TypeResourceURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint160",
          "name": "typeID",
          "type": "uint160"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "verificationStackID",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "TypeVerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "calcTypeID",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        }
      ],
      "name": "getPublicSignalGetter",
      "outputs": [
        {
          "internalType": "contract IPublicSignalGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "_id",
          "type": "uint160"
        }
      ],
      "name": "getType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "definition",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resourceURI",
              "type": "string"
            }
          ],
          "internalType": "struct CredentialType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        }
      ],
      "name": "getTypeAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        }
      ],
      "name": "getVerifier",
      "outputs": [
        {
          "internalType": "contract IProofVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        }
      ],
      "name": "isRevocable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        }
      ],
      "name": "isTypeFullyInitializedForStack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resourceURI",
          "type": "string"
        }
      ],
      "name": "registerType",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resourceURI",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        },
        {
          "internalType": "contract IProofVerifier",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "contract IPublicSignalGetter",
          "name": "publicSignalGetter",
          "type": "address"
        }
      ],
      "name": "registerType1Step",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resourceURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "verificationStackId",
              "type": "uint8"
            },
            {
              "internalType": "contract IProofVerifier",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "contract IPublicSignalGetter",
              "name": "publicSignalGetter",
              "type": "address"
            }
          ],
          "internalType": "struct CredentialTypeMiscConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setPrimitiveType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferTypeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        },
        {
          "internalType": "contract IPublicSignalGetter",
          "name": "getter",
          "type": "address"
        }
      ],
      "name": "updateTypePublicSignalGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "updateTypeResourceURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "typeId",
          "type": "uint160"
        },
        {
          "internalType": "uint8",
          "name": "verificationStackId",
          "type": "uint8"
        },
        {
          "internalType": "contract IProofVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "updateTypeVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad0bdf87d3f2939d9fbe6861988e138343393af6da87bc904bae59bb999ffd2a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xb85b3D61439a3d70D3DF7913a3A764F352b32C55",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1694717",
    "logsBloom": "0x00000000000000000000000000000000000000400000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000010001000000001000000000000000000020001000000000000000000000000000000000000000000000000000000000000000200080000000000000000000000000000000000000000000020000000000000000000000000000000000080000000000000000000000000000000",
    "blockHash": "0xb861c38db6774e85ac0ebe7c9b3e2c3813739c158c6cc54b510db6baa0da72ec",
    "transactionHash": "0xad0bdf87d3f2939d9fbe6861988e138343393af6da87bc904bae59bb999ffd2a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27,
        "transactionHash": "0xad0bdf87d3f2939d9fbe6861988e138343393af6da87bc904bae59bb999ffd2a",
        "address": "0x77dA3Cf4418009D171B4963db815Ca46d6F2E79D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb861c38db6774e85ac0ebe7c9b3e2c3813739c158c6cc54b510db6baa0da72ec"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27,
        "transactionHash": "0xad0bdf87d3f2939d9fbe6861988e138343393af6da87bc904bae59bb999ffd2a",
        "address": "0x77dA3Cf4418009D171B4963db815Ca46d6F2E79D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000a5e5ea38cf3bd36475596858ac7546d17752e4a7"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb861c38db6774e85ac0ebe7c9b3e2c3813739c158c6cc54b510db6baa0da72ec"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "1694717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa5E5EA38cF3bD36475596858AC7546d17752E4A7"
  ],
  "numDeployments": 1,
  "solcInputHash": "e08d6b930820ab219ef1afbfaba72b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTypeName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTypeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TypeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TypeDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"typeID\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TypeAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"typeID\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"verificationStackID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"publicSignalGetter\",\"type\":\"address\"}],\"name\":\"TypePublicSignalGetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"typeID\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resourceURI\",\"type\":\"string\"}],\"name\":\"TypeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"typeID\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldResourceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newResourceURI\",\"type\":\"string\"}],\"name\":\"TypeResourceURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"typeID\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"verificationStackID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"TypeVerifierUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"calcTypeID\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"}],\"name\":\"getPublicSignalGetter\",\"outputs\":[{\"internalType\":\"contract IPublicSignalGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_id\",\"type\":\"uint160\"}],\"name\":\"getType\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceURI\",\"type\":\"string\"}],\"internalType\":\"struct CredentialType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"}],\"name\":\"getTypeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"}],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"contract IProofVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"}],\"name\":\"isRevocable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"}],\"name\":\"isTypeFullyInitializedForStack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceURI\",\"type\":\"string\"}],\"name\":\"registerType\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"},{\"internalType\":\"contract IProofVerifier\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"contract IPublicSignalGetter\",\"name\":\"publicSignalGetter\",\"type\":\"address\"}],\"name\":\"registerType1Step\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resourceURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"},{\"internalType\":\"contract IProofVerifier\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"contract IPublicSignalGetter\",\"name\":\"publicSignalGetter\",\"type\":\"address\"}],\"internalType\":\"struct CredentialTypeMiscConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setPrimitiveType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferTypeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"},{\"internalType\":\"contract IPublicSignalGetter\",\"name\":\"getter\",\"type\":\"address\"}],\"name\":\"updateTypePublicSignalGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateTypeResourceURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"typeId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"verificationStackId\",\"type\":\"uint8\"},{\"internalType\":\"contract IProofVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"updateTypeVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that allows the registration of credential types.      Credential types are unique per creator and type name.\",\"events\":{\"TypeAdminTransferred(uint160,address,address)\":{\"details\":\"Emitted when the admin of a type is transferred\",\"params\":{\"newAdmin\":\"address of the new admin\",\"oldAdmin\":\"address of the old admin\",\"typeID\":\"type id\"}},\"TypePublicSignalGetterUpdated(uint160,uint8,address)\":{\"details\":\"Emitted when the intrinsic signal indexes are updated for a type\",\"params\":{\"publicSignalGetter\":\"address of the public signal getter\",\"typeID\":\"type id\",\"verificationStackID\":\"verification stack id\"}},\"TypeRegistered(uint160,address,string,string,string,string)\":{\"details\":\"Emitted when a new type is registered\",\"params\":{\"admin\":\"Address of the admin of the type.\",\"definition\":\"Immutable definition of the type\",\"description\":\"Immutable description of the type\",\"name\":\"Name of the type\",\"resourceURI\":\"Mutable resource URI for the type\",\"typeID\":\"Unique identifier for the registered type\"}},\"TypeResourceURIUpdated(uint160,string,string)\":{\"details\":\"Emitted when the resource URI of a type is updated\",\"params\":{\"newResourceURI\":\"The new resource URI\",\"oldResourceURI\":\"The previous resource URI\",\"typeID\":\"Unique identifier for the type being updated\"}},\"TypeVerifierUpdated(uint160,uint8,address)\":{\"details\":\"Emitted when a proof verifier is updated for a type\",\"params\":{\"typeID\":\"type id\",\"verificationStackID\":\"verification stack id\",\"verifier\":\"address of the verifier\"}}},\"kind\":\"dev\",\"methods\":{\"calcTypeID(address,string)\":{\"details\":\"calculate the typeID of a type\"},\"constructor\":{\"params\":{\"admin\":\"admin of the contract\"}},\"getPublicSignalGetter(uint160,uint8)\":{\"params\":{\"typeId\":\"type id of the type\",\"verificationStackId\":\"verification stack id\"}},\"getType(uint160)\":{\"details\":\"get the type for the given typeID\"},\"getTypeAdmin(uint160)\":{\"details\":\"Retrieve the admin of a type\",\"params\":{\"typeId\":\"type id of the type\"},\"returns\":{\"_0\":\"address of the admin of the type\"}},\"getVerifier(uint160,uint8)\":{\"details\":\"get the verifier for the given typeID and verificationStackID.\"},\"isRevocable(uint160)\":{\"details\":\"check if the type is revocable\"},\"isTypeFullyInitializedForStack(uint160,uint8)\":{\"details\":\"check if the type is fully initialized for the given verification stack.\",\"params\":{\"typeId\":\"id of the type\",\"verificationStackId\":\"id the verification stack\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerType(bool,string,string,string,string)\":{\"details\":\"register a new type by msg.sender\",\"params\":{\"definition\":\"type definition string, immutable\",\"description\":\"description of the type, immutable\",\"name\":\"type name\",\"resourceURI\":\"resource URI of the type, mutable\"},\"returns\":{\"_0\":\"typeID of the registered type\"}},\"registerType1Step(bool,string,string,string,string,uint8,address,address)\":{\"params\":{\"definition\":\"Immutable type definition string\",\"description\":\"Description of the type\",\"name\":\"Type name\",\"publicSignalGetter\":\"public signal getter for the type\",\"resourceURI\":\"Mutable resource URI of the type\",\"verifier\":\"verifier for the type\"},\"returns\":{\"_0\":\"typeID Unique identifier of the registered type\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setPrimitiveType(uint160,string,string,string,string,(bool,uint8,address,address))\":{\"params\":{\"config\":\"misc config for the type\",\"definition\":\"definition string\",\"description\":\"description of the type\",\"name\":\"name of the type\",\"resourceURI\":\"mutable resource URI of the type\",\"typeId\":\"the type id of the primitive type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTypeAdmin(uint160,address)\":{\"details\":\"transfer the ownership of a type.\",\"params\":{\"newAdmin\":\"address of the new admin\",\"typeId\":\"type id of the type\"}},\"updateTypePublicSignalGetter(uint160,uint8,address)\":{\"details\":\"update the public signal getter for a type\",\"params\":{\"getter\":\"the address of the public signal getter\",\"typeId\":\"id of the type\",\"verificationStackId\":\"id of the verification stack\"}},\"updateTypeResourceURI(uint160,string)\":{\"details\":\"update the resource URI of a type\",\"params\":{\"typeId\":\"of the type\",\"uri\":\"new resource URI TODO: resource URI specifcation: support multiple verification stack.\"}},\"updateTypeVerifier(uint160,uint8,address)\":{\"details\":\"update the verifier for a type\"}},\"stateVariables\":{\"_credTypes\":{\"details\":\"mapping from typeID to CredentialType.\"},\"_psGetters\":{\"details\":\"mapping from typeID to its verification stack's intrinsic value .verifier typeID => verificationStackID => verifier\"},\"_verifiers\":{\"details\":\"mapping from typeID to its verification stack's verifier.verifier typeID => verificationStackID => verifier\"}},\"title\":\"TypeRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerType1Step(bool,string,string,string,string,uint8,address,address)\":{\"notice\":\"Register a new type by `msg.sender` with verifier and public signal getter set for a specific verification stack.\"},\"setPrimitiveType(uint160,string,string,string,string,(bool,uint8,address,address))\":{\"notice\":\"set a primitive type, only callable by the admin.\"}},\"notice\":\"Getters in this contract does not do any parameter validation,         so callers should validate the inputs and outputs and uninitialized values will be zero.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TypeRegistry.sol\":\"TypeRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/TypeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { ITypeRegistry, CredentialType, CredentialTypeMiscConfig } from \\\"./interfaces/ITypeRegistry.sol\\\";\\nimport { IProofVerifier } from \\\"./interfaces/IProofVerifier.sol\\\";\\nimport { IPublicSignalGetter } from \\\"./interfaces/IPublicSignalGetter.sol\\\";\\n\\n/**\\n * @title TypeRegistry\\n * @dev A contract that allows the registration of credential types.\\n *      Credential types are unique per creator and type name.\\n * @notice Getters in this contract does not do any parameter validation,\\n *         so callers should validate the inputs and outputs and uninitialized values will be zero.\\n */\\ncontract TypeRegistry is ITypeRegistry, Ownable {\\n    error TypeAlreadyExists();\\n    error TypeDoesNotExist();\\n    error InvalidTypeName();\\n    error NotTypeOwner();\\n\\n    /// @dev mapping from typeID to CredentialType.\\n    mapping(uint160 typeId => CredentialType credType) private _credTypes;\\n\\n    /// @dev mapping from typeID to its verification stack's verifier.\\n    /// @dev verifier typeID => verificationStackID => verifier\\n    mapping(uint160 typeId => mapping(uint8 veriStackId => IProofVerifier verifier)) private _verifiers;\\n\\n    /// @dev mapping from typeID to its verification stack's intrinsic value .\\n    /// @dev verifier typeID => verificationStackID => verifier\\n    mapping(uint160 typeId => mapping(uint8 veriStackId => IPublicSignalGetter psGetter)) private _psGetters;\\n\\n    /// @param admin admin of the contract\\n    constructor(address admin) {\\n        transferOwnership(admin);\\n    }\\n\\n    /// @notice set a primitive type, only callable by the admin.\\n    /// @param typeId the type id of the primitive type\\n    /// @param name name of the type\\n    /// @param definition definition string\\n    /// @param description description of the type\\n    /// @param resourceURI mutable resource URI of the type\\n    /// @param config misc config for the type\\n    function setPrimitiveType(\\n        uint160 typeId,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        CredentialTypeMiscConfig calldata config\\n    ) external override onlyOwner {\\n        // check if the type is already set by others.\\n        // primitive type will have its creator as 0x0.\\n        if (bytes(_credTypes[typeId].name).length != 0) {\\n            revert TypeAlreadyExists();\\n        }\\n        if (bytes(name).length == 0) {\\n            revert InvalidTypeName();\\n        }\\n        // save type info\\n        _credTypes[typeId] = CredentialType({\\n            revocable: config.revocable,\\n            admin: address(0),\\n            name: name,\\n            definition: definition,\\n            description: description,\\n            resourceURI: resourceURI\\n        });\\n        emit TypeRegistered(typeId, address(0), name, definition, description, resourceURI);\\n        // add verifier and public signal getter\\n        _verifiers[typeId][config.verificationStackId] = config.verifier;\\n        emit TypeVerifierUpdated(typeId, config.verificationStackId, address(config.verifier));\\n        _psGetters[typeId][config.verificationStackId] = config.publicSignalGetter;\\n        emit TypePublicSignalGetterUpdated(typeId, config.verificationStackId, address(config.publicSignalGetter));\\n    }\\n\\n    /// @dev register a new type by msg.sender\\n    /// @param name type name\\n    /// @param definition type definition string, immutable\\n    /// @param description description of the type, immutable\\n    /// @param resourceURI resource URI of the type, mutable\\n    /// @return typeID of the registered type\\n    function registerType(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI\\n    ) external override returns (uint160) {\\n        return _registerType(revocable, name, definition, description, resourceURI);\\n    }\\n\\n    /// @notice Register a new type by `msg.sender` with verifier and public signal getter set for a specific verification stack.\\n    /// @param name Type name\\n    /// @param definition Immutable type definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @param verifier verifier for the type\\n    /// @param publicSignalGetter public signal getter for the type\\n    /// @return typeID Unique identifier of the registered type\\n    function registerType1Step(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        uint8 verificationStackId,\\n        IProofVerifier verifier,\\n        IPublicSignalGetter publicSignalGetter\\n    ) external override returns (uint160) {\\n        uint160 typeId = _registerType(revocable, name, definition, description, resourceURI);\\n        // add verifier and public signal getter\\n        _verifiers[typeId][verificationStackId] = verifier;\\n        emit TypeVerifierUpdated(typeId, verificationStackId, address(verifier));\\n        _psGetters[typeId][verificationStackId] = publicSignalGetter;\\n        emit TypePublicSignalGetterUpdated(typeId, verificationStackId, address(publicSignalGetter));\\n        return typeId;\\n    }\\n\\n    /// @dev register a new type by msg.sender\\n    /// @param name type name\\n    /// @param definition type definition string, immutable\\n    /// @param description description of the type, immutable\\n    /// @param resourceURI resource URI of the type, mutable\\n    /// @return typeID of the registered type\\n    function _registerType(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI\\n    ) internal returns (uint160) {\\n        uint160 credTypeID = _calcTypeID(msg.sender, name);\\n        if (bytes(_credTypes[credTypeID].name).length != 0) {\\n            revert TypeAlreadyExists();\\n        }\\n        if (bytes(name).length == 0) {\\n            revert InvalidTypeName();\\n        }\\n        CredentialType memory credType = CredentialType({\\n            revocable: revocable,\\n            admin: msg.sender,\\n            name: name,\\n            definition: definition,\\n            description: description,\\n            resourceURI: resourceURI\\n        });\\n        _credTypes[credTypeID] = credType;\\n        emit TypeRegistered(\\n            credTypeID,\\n            credType.admin,\\n            credType.name,\\n            credType.definition,\\n            credType.description,\\n            credType.resourceURI\\n        );\\n        return credTypeID;\\n    }\\n\\n    /// @dev check if the type is fully initialized for the given verification stack.\\n    /// @param typeId id of the type\\n    /// @param verificationStackId id the verification stack\\n    function isTypeFullyInitializedForStack(\\n        uint160 typeId,\\n        uint8 verificationStackId\\n    ) external view override returns (bool) {\\n        return\\n            _typeExists(typeId) &&\\n            _verifiers[typeId][verificationStackId] != IProofVerifier(address(0)) &&\\n            _psGetters[typeId][verificationStackId] != IPublicSignalGetter(address(0));\\n    }\\n\\n    /// @dev transfer the ownership of a type.\\n    /// @param typeId type id of the type\\n    /// @param newAdmin address of the new admin\\n    function transferTypeAdmin(uint160 typeId, address newAdmin) external override onlyTypeOwner(typeId) {\\n        if (_credTypes[typeId].admin == address(0)) {\\n            // primitive type doesn't have an admin, so the owner can't transfer it.\\n            return;\\n        }\\n        _credTypes[typeId].admin = newAdmin;\\n        emit TypeAdminTransferred(typeId, msg.sender, newAdmin);\\n    }\\n\\n    /// @dev update the resource URI of a type\\n    /// @param typeId of the type\\n    /// @param uri new resource URI\\n    /// TODO: resource URI specifcation: support multiple verification stack.\\n    function updateTypeResourceURI(uint160 typeId, string calldata uri) external override onlyTypeOwner(typeId) {\\n        emit TypeResourceURIUpdated(typeId, _credTypes[typeId].resourceURI, uri);\\n        _credTypes[typeId].resourceURI = uri;\\n    }\\n\\n    /// @dev update the verifier for a type\\n    function updateTypeVerifier(\\n        uint160 typeId,\\n        uint8 verificationStackId,\\n        IProofVerifier verifier\\n    ) external override onlyTypeOwner(typeId) {\\n        _verifiers[typeId][verificationStackId] = verifier;\\n        emit TypeVerifierUpdated(typeId, verificationStackId, address(verifier));\\n    }\\n\\n    /// @dev update the public signal getter for a type\\n    /// @param typeId id of the type\\n    /// @param verificationStackId id of the verification stack\\n    /// @param getter the address of the public signal getter\\n    function updateTypePublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId,\\n        IPublicSignalGetter getter\\n    ) external override onlyTypeOwner(typeId) {\\n        _psGetters[typeId][verificationStackId] = getter;\\n        emit TypePublicSignalGetterUpdated(typeId, verificationStackId, address(getter));\\n    }\\n\\n    /// @dev get the type for the given typeID\\n    function getType(uint160 _id) external view override returns (CredentialType memory) {\\n        return _credTypes[_id];\\n    }\\n\\n    /// @dev Retrieve the admin of a type\\n    /// @param typeId type id of the type\\n    /// @return address of the admin of the type\\n    function getTypeAdmin(uint160 typeId) external view override returns (address) {\\n        /// uninitialized type, return 0x0\\n        if (!_typeExists(typeId)) {\\n            return address(0);\\n        }\\n        if (_credTypes[typeId].admin != address(0)) {\\n            return _credTypes[typeId].admin;\\n        }\\n        return owner();\\n    }\\n\\n    /// @dev check if the type is revocable\\n    function isRevocable(uint160 typeId) external view override returns (bool) {\\n        return _credTypes[typeId].revocable;\\n    }\\n\\n    /// @dev get the verifier for the given typeID and verificationStackID.\\n    function getVerifier(uint160 typeId, uint8 verificationStackId) external view override returns (IProofVerifier) {\\n        return _verifiers[typeId][verificationStackId];\\n    }\\n\\n    /// @param typeId type id of the type\\n    /// @param verificationStackId verification stack id\\n    function getPublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId\\n    ) external view override returns (IPublicSignalGetter) {\\n        return _psGetters[typeId][verificationStackId];\\n    }\\n\\n    /// @dev calculate the typeID of a type\\n    function calcTypeID(address creator, string calldata name) external pure override returns (uint160) {\\n        return _calcTypeID(creator, name);\\n    }\\n\\n    /// @dev calculate the typeID of a type\\n    function _calcTypeID(address creator, string calldata name) private pure returns (uint160) {\\n        return uint160(uint256(keccak256(abi.encodePacked(creator, name))));\\n    }\\n\\n    /// @dev check if the type exists\\n    function _typeExists(uint160 typeId) private view returns (bool) {\\n        return bytes(_credTypes[typeId].name).length != 0;\\n    }\\n\\n    /// @dev check if the caller is the owner of the type\\n    function _onlyTypeOwner(uint160 typeId) private view {\\n        if (!_typeExists(typeId)) {\\n            revert TypeDoesNotExist();\\n        }\\n        // primitive type will have its creator as 0x0, so only the admin can update it.\\n        if (_credTypes[typeId].admin == address(0)) {\\n            if (msg.sender != owner()) {\\n                revert NotTypeOwner();\\n            }\\n            return;\\n        }\\n        if (_credTypes[typeId].admin != msg.sender) {\\n            revert NotTypeOwner();\\n        }\\n    }\\n\\n    modifier onlyTypeOwner(uint160 typeId) {\\n        _onlyTypeOwner(typeId);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x177787f1c6aa16f4084d7510c672dbfad00c74641a37eda0d9d659df119d8a06\",\"license\":\"MIT\"},\"contracts/interfaces/IProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title IProofVerifier\\n/// @dev Interface for static verification of zero-knowledge proofs.\\ninterface IProofVerifier {\\n    /// @notice Retrieves the verification keys.\\n    /// @dev This function is used to get the verification keys that are necessary for verifying proofs.\\n    /// @return An array of `uint` representing the verification keys.\\n    function getVerificationKeys() external view returns (uint256[] memory);\\n\\n    /// @dev Checks if the public signals are aliased. Aliased signals should never be used in proofs.\\n    ///      This is useful when using proof aggregators that does not check for signal aliasing.\\n    /// @param _pubSignals An array of `uint` representing the public signals.\\n    /// @return A boolean value indicating if any public signal is aliased (`true`) or not (`false`).\\n    function isAliased(uint256[] calldata _pubSignals) external view returns (bool);\\n\\n    /// @dev This function takes a cryptographic proof and public signals to verify the proof's validity.\\n    /// @notice It verifies the proof and check if public signals were aliased.\\n    /// @param _proofs An array of `uint` representing the proof.\\n    /// @param _pubSignals An array of `uint` representing the public signals.\\n    /// @return A boolean value indicating whether the proof is valid (`true`) or not (`false`).\\n    function verifyProof(uint256[] calldata _proofs, uint256[] calldata _pubSignals) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcf34af8efbb65237c2a47fd421e615cec850b19f9647fc2087c2a034d319b7be\",\"license\":\"MIT\"},\"contracts/interfaces/IPublicSignalGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Intrinsic Signal enum\\nenum IntrinsicSignalName {\\n    TYPE,\\n    CONTEXT,\\n    NULLIFIER,\\n    EXTERNAL_NULLIFIER,\\n    REVEAL_IDENTITY,\\n    EXPIRATION_LB,\\n    KEY_ID,\\n    ID_EQUALS_TO,\\n    SIG_REVOCATION_SMT_ROOT\\n}\\n\\n/// @title Public Signal Getter Interface\\n/// @dev Public signals (inputs) are represented as an array of uints in galxe identity protocol.\\n///      To find the public signal for a given signal name, type designer should set a contract\\n///      in the type registry that implements this interface.\\ninterface IPublicSignalGetter {\\n    /// @dev get the public signal for the signal name, represented as the given enum (represented as uint8), based on the public signals.\\n    /// @notice Implementation must be able to handle intrinsic signals, defiend in IntrinsicSignalName enum.\\n    ///         Type-specific signals support is optional.\\n    /// @param name The signal name, represented as the given enum (converted to uint8).\\n    /// @param publicSignals The public signals.\\n    function getPublicSignal(uint8 name, uint256[] calldata publicSignals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfdfd996ad88b94d59f07e0ef67a2e6091ccd03a25c395fe53fb1e83770d99b2\",\"license\":\"MIT\"},\"contracts/interfaces/ITypeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IProofVerifier } from \\\"./IProofVerifier.sol\\\";\\nimport { IPublicSignalGetter } from \\\"./IPublicSignalGetter.sol\\\";\\n\\n/// @title Credential Type\\n/// @dev Defines the structure of a credential type.\\nstruct CredentialType {\\n    // @dev This flag indicates if the credential type support revocation.\\n    bool revocable;\\n    // @dev The address of the admin of the credential type, initially set to the creator.\\n    address admin;\\n    // @dev Provides a human-readable identifier for the credential.\\n    string name;\\n    // @dev The type specification of Galxe Identity Credential Type Schema.\\n    string definition;\\n    // @dev Additional context or information about the type.\\n    string description;\\n    // @dev A URI to an external JSON file of more information about the credential.\\n    // See whitepaper for the JSON schema specification.\\n    string resourceURI;\\n}\\n\\n/// @title Credential Type Config, miscellanous.\\n/// @notice To save stack space, we use this struct to store the verifier and public signal getter.\\nstruct CredentialTypeMiscConfig {\\n    bool revocable;\\n    uint8 verificationStackId;\\n    IProofVerifier verifier;\\n    IPublicSignalGetter publicSignalGetter;\\n}\\n\\n/// @title Interface for Type Registration Contract\\n/// @notice This interface defines the functions for registering and managing types by users.\\ninterface ITypeRegistry {\\n    /// @dev Emitted when a new type is registered\\n    /// @param typeID Unique identifier for the registered type\\n    /// @param admin Address of the admin of the type.\\n    /// @param name Name of the type\\n    /// @param definition Immutable definition of the type\\n    /// @param description Immutable description of the type\\n    /// @param resourceURI Mutable resource URI for the type\\n    event TypeRegistered(\\n        uint160 indexed typeID,\\n        address indexed admin,\\n        string name,\\n        string definition,\\n        string description,\\n        string resourceURI\\n    );\\n\\n    /// @dev Emitted when the resource URI of a type is updated\\n    /// @param typeID Unique identifier for the type being updated\\n    /// @param oldResourceURI The previous resource URI\\n    /// @param newResourceURI The new resource URI\\n    event TypeResourceURIUpdated(uint160 indexed typeID, string oldResourceURI, string newResourceURI);\\n\\n    /// @dev Emitted when a proof verifier is updated for a type\\n    /// @param typeID type id\\n    /// @param verificationStackID verification stack id\\n    /// @param verifier address of the verifier\\n    event TypeVerifierUpdated(uint160 indexed typeID, uint8 indexed verificationStackID, address indexed verifier);\\n\\n    /// @dev Emitted when the intrinsic signal indexes are updated for a type\\n    /// @param typeID type id\\n    /// @param verificationStackID verification stack id\\n    /// @param publicSignalGetter  address of the public signal getter\\n    event TypePublicSignalGetterUpdated(\\n        uint160 indexed typeID,\\n        uint8 indexed verificationStackID,\\n        address indexed publicSignalGetter\\n    );\\n\\n    /// @dev Emitted when the admin of a type is transferred\\n    /// @param typeID type id\\n    /// @param oldAdmin address of the old admin\\n    /// @param newAdmin address of the new admin\\n    event TypeAdminTransferred(uint160 indexed typeID, address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @dev transfer the ownership of a type.\\n    /// @param typeId type id of the type\\n    /// @param newAdmin address of the new admin\\n    function transferTypeAdmin(uint160 typeId, address newAdmin) external;\\n\\n    /// @notice set a primitive type, only callable by the admin.\\n    /// @param typeId the type id of the primitive type\\n    /// @param name name of the type\\n    /// @param definition definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @param config revocable, verifier and public signal getter.\\n    function setPrimitiveType(\\n        uint160 typeId,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        CredentialTypeMiscConfig calldata config\\n    ) external;\\n\\n    /// @notice Register a new type by `msg.sender`\\n    /// @param name Type name\\n    /// @param definition Immutable type definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @return typeID Unique identifier of the registered type\\n    function registerType(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI\\n    ) external returns (uint160);\\n\\n    /// @notice Register a new type by `msg.sender` with verifier and public signal getter set for a specific verification stack.\\n    /// @param name Type name\\n    /// @param definition Immutable type definition string\\n    /// @param description Description of the type\\n    /// @param resourceURI Mutable resource URI of the type\\n    /// @param verifier verifier for the type\\n    /// @param publicSignalGetter public signal getter for the type\\n    /// @return typeID Unique identifier of the registered type\\n    function registerType1Step(\\n        bool revocable,\\n        string calldata name,\\n        string calldata definition,\\n        string calldata description,\\n        string calldata resourceURI,\\n        uint8 verificationStackId,\\n        IProofVerifier verifier,\\n        IPublicSignalGetter publicSignalGetter\\n    ) external returns (uint160);\\n\\n    /// @notice Update the resource URI of a type\\n    /// @dev Can only be called by the type owner (`msg.sender`)\\n    /// @param _id ID of the type to update\\n    /// @param _resourceURI New resource URI for the type\\n    function updateTypeResourceURI(uint160 _id, string calldata _resourceURI) external;\\n\\n    /// @dev update the verifier for a type\\n    function updateTypeVerifier(uint160 typeId, uint8 verificationStackId, IProofVerifier verifier) external;\\n\\n    /// @dev update the verifier for a type\\n    function updateTypePublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId,\\n        IPublicSignalGetter getter\\n    ) external;\\n\\n    /// @param typeId type id of the type\\n    /// @param verificationStackId verification stack id\\n    function getVerifier(uint160 typeId, uint8 verificationStackId) external view returns (IProofVerifier);\\n\\n    /// @param typeId type id of the type\\n    /// @param verificationStackId verification stack id\\n    function getPublicSignalGetter(\\n        uint160 typeId,\\n        uint8 verificationStackId\\n    ) external view returns (IPublicSignalGetter);\\n\\n    /// @dev check if the type is fully initialized for the given verification stack.\\n    /// @param typeId id of the type\\n    /// @param verificationStackId id the verification stack\\n    function isTypeFullyInitializedForStack(uint160 typeId, uint8 verificationStackId) external view returns (bool);\\n\\n    /// @dev Retrieve details of a type for the given typeID\\n    /// @param _id ID of the type to retrieve\\n    /// @return A `CredentialType` struct containing details of the type\\n    function getType(uint160 _id) external view returns (CredentialType memory);\\n\\n    /// @dev Retrieve the admin of a type\\n    /// @param typeId type id of the type\\n    /// @return address of the admin of the type\\n    function getTypeAdmin(uint160 typeId) external view returns (address);\\n\\n    /// @dev check if the type is revocable\\n    function isRevocable(uint160 typeId) external view returns (bool);\\n\\n    /// @notice Calculate the typeID of a type, typeID is keccak256(creator, name) in uint160.\\n    /// @param creator Address of the type creator\\n    /// @param name Name of the type\\n    /// @return The calculated typeID based on the creator address and type name\\n    function calcTypeID(address creator, string calldata name) external pure returns (uint160);\\n}\\n\",\"keccak256\":\"0x86d4db6288f762aecd0725e2d4c560b56e5792c0062d48f406e04807488d1878\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ecc38038062001ecc833981016040819052620000349162000182565b6200003f3362000051565b6200004a81620000a1565b50620001b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000ab62000124565b6001600160a01b038116620001165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001218162000051565b50565b6000546001600160a01b03163314620001805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200010d565b565b6000602082840312156200019557600080fd5b81516001600160a01b0381168114620001ad57600080fd5b9392505050565b611d0880620001c46000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063cc34e0fa11610081578063ead4d4c211610066578063ead4d4c21461029a578063f2fde38b146102ad578063f7c27c28146102c057600080fd5b8063cc34e0fa14610274578063cd149acb1461028757600080fd5b80638da5cb5b1461021157806392b0a57f14610222578063b9d36dde1461024e578063bc03b4ae1461026157600080fd5b8063516158b1116100ee578063516158b11461018b578063715018a6146101ab57806373190ca5146101b35780637b4ed185146101d657600080fd5b806304a1fc8c1461012057806307f28274146101505780632f6e029b146101635780634d65526414610178575b600080fd5b61013361012e3660046113c7565b6102fb565b6040516001600160a01b0390911681526020015b60405180910390f35b61013361015e36600461142c565b610310565b610176610171366004611461565b610381565b005b610176610186366004611559565b6107cf565b61019e61019936600461142c565b610842565b60405161014791906115e8565b610176610b16565b6101c66101c1366004611685565b610b2a565b6040519015158152602001610147565b6101336101e4366004611685565b6001600160a01b03918216600090815260036020908152604080832060ff94909416835292905220541690565b6000546001600160a01b0316610133565b6101c661023036600461142c565b6001600160a01b031660009081526001602052604090205460ff1690565b61017661025c3660046116ba565b610ba2565b61017661026f3660046113c7565b610c3e565b610133610282366004611703565b610cce565b610176610295366004611559565b610dbc565b6101336102a8366004611823565b610e2f565b6101766102bb36600461142c565b610e50565b6101336102ce366004611685565b6001600160a01b03918216600090815260026020908152604080832060ff94909416835292905220541690565b6000610308848484610ee5565b949350505050565b600061031b82610f1c565b61032757506000919050565b6001600160a01b038281166000908152600160205260409020546101009004161561037057506001600160a01b0390811660009081526001602052604090205461010090041690565b50506000546001600160a01b031690565b610389610f4b565b6001600160a01b038a1660009081526001602081905260409091200180546103b0906118fa565b1590506103cf5760405162a0b14560e31b815260040160405180910390fd5b60008890036103f0576040516228eb7360e41b815260040160405180910390fd5b6040805160c0810190915280610409602084018461192e565b1515815260200160006001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250604080516020601f87018190048102820181019092528581529181019190869086908190840183828082843760009201829052509390945250506001600160a01b038d8116825260016020818152604093849020865181549288015174ffffffffffffffffffffffffffffffffffffffffff1990931690151574ffffffffffffffffffffffffffffffffffffffff001916176101009290941691909102929092178255918401519092509082019061058790826119af565b506060820151600282019061059c90826119af565b50608082015160038201906105b190826119af565b5060a082015160048201906105c690826119af565b5090505060006001600160a01b03168a6001600160a01b03167fb2bcfea53e9652103d965febf849a5cbfee6074470a6e9efb080cdfb4ff850868b8b8b8b8b8b8b8b60405161061c989796959493929190611a98565b60405180910390a3610634606082016040830161142c565b6001600160a01b038b166000908152600260209081526040808320929161065f918601908601611af8565b60ff1681526020810191909152604090810160002080546001600160a01b0319166001600160a01b0393909316929092179091556106a3906060830190830161142c565b6001600160a01b03166106bc6040830160208401611af8565b60ff168b6001600160a01b03167f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a260405160405180910390a4610705608082016060830161142c565b6001600160a01b038b1660009081526003602090815260408083209291610730918601908601611af8565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055610771608082016060830161142c565b6001600160a01b031661078a6040830160208401611af8565b60ff168b6001600160a01b03167f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97960405160405180910390a450505050505050505050565b826107d981610fa5565b6001600160a01b03848116600081815260036020908152604080832060ff8916808552925280832080546001600160a01b0319169588169586179055519092917f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97991a450505050565b6108866040518060c0016040528060001515815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b03808316600090815260016020818152604092839020835160c081018552815460ff811615158252610100900490951691850191909152908101805491928401916108d7906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610903906118fa565b80156109505780601f1061092557610100808354040283529160200191610950565b820191906000526020600020905b81548152906001019060200180831161093357829003601f168201915b50505050508152602001600282018054610969906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610995906118fa565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081526020016003820180546109fb906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610a27906118fa565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b50505050508152602001600482018054610a8d906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab9906118fa565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050815250509050919050565b610b1e610f4b565b610b286000611059565b565b6000610b3583610f1c565b8015610b6857506001600160a01b03838116600090815260026020908152604080832060ff871684529091529020541615155b8015610b9b57506001600160a01b03838116600090815260036020908152604080832060ff871684529091529020541615155b9392505050565b81610bac81610fa5565b6001600160a01b0383811660009081526001602052604090205461010090041615610c39576001600160a01b03838116600081815260016020526040808220805474ffffffffffffffffffffffffffffffffffffffff001916610100958816958602179055513392917f17ae17210ed3ecea7d066711730c938a5c899e513e64d1a18fe2441bb0aaf6f691a45b505050565b82610c4881610fa5565b6001600160a01b0384166000818152600160205260409081902090517f6a9bcdc77ef7c5aa7f5712387612ce38f1d439e5ce38fa234f09a3a9edd313d791610c999160049091019087908790611b13565b60405180910390a26001600160a01b0384166000908152600160205260409020600401610cc7838583611bb7565b5050505050565b600080610ce28e8e8e8e8e8e8e8e8e6110a9565b6001600160a01b03818116600081815260026020908152604080832060ff8c16808552925280832080546001600160a01b031916958b1695861790555194955092937f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a29190a46001600160a01b03818116600081815260036020908152604080832060ff8b16808552925280832080546001600160a01b0319169589169586179055519092917f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97991a49d9c50505050505050505050505050565b82610dc681610fa5565b6001600160a01b03848116600081815260026020908152604080832060ff8916808552925280832080546001600160a01b0319169588169586179055519092917f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a291a450505050565b6000610e428a8a8a8a8a8a8a8a8a6110a9565b9a9950505050505050505050565b610e58610f4b565b6001600160a01b038116610ed95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610ee281611059565b50565b6000838383604051602001610efc93929190611c77565b60408051601f198184030181529190528051602090910120949350505050565b6001600160a01b03811660009081526001602081905260408220018054610f42906118fa565b15159392505050565b6000546001600160a01b03163314610b285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ed0565b610fae81610f1c565b610fcb5760405163d565201560e01b815260040160405180910390fd5b6001600160a01b0381811660009081526001602052604090205461010090041661101a576000546001600160a01b03163314610ee25760405163bb7245e360e01b815260040160405180910390fd5b6001600160a01b038181166000908152600160205260409020546101009004163314610ee25760405163bb7245e360e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806110b7338b8b610ee5565b6001600160a01b0381166000908152600160208190526040909120018054919250906110e2906118fa565b1590506111015760405162a0b14560e31b815260040160405180910390fd5b6000899003611122576040516228eb7360e41b815260040160405180910390fd5b60006040518060c001604052808d15158152602001336001600160a01b031681526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8d018190048102820181019092528b815291810191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f89018190048102820181019092528781529181019190889088908190840183828082843760009201829052509390945250506001600160a01b03858116825260016020818152604093849020865181549288015174ffffffffffffffffffffffffffffffffffffffffff1990931690151574ffffffffffffffffffffffffffffffffffffffff001916176101009290941691909102929092178255918401519394508493909250908201906112b290826119af565b50606082015160028201906112c790826119af565b50608082015160038201906112dc90826119af565b5060a082015160048201906112f190826119af565b5090505080602001516001600160a01b0316826001600160a01b03167fb2bcfea53e9652103d965febf849a5cbfee6074470a6e9efb080cdfb4ff850868360400151846060015185608001518660a001516040516113529493929190611ca3565b60405180910390a3509a9950505050505050505050565b6001600160a01b0381168114610ee257600080fd5b60008083601f84011261139057600080fd5b50813567ffffffffffffffff8111156113a857600080fd5b6020830191508360208285010111156113c057600080fd5b9250929050565b6000806000604084860312156113dc57600080fd5b83356113e781611369565b9250602084013567ffffffffffffffff81111561140357600080fd5b61140f8682870161137e565b9497909650939450505050565b803561142781611369565b919050565b60006020828403121561143e57600080fd5b8135610b9b81611369565b60006080828403121561145b57600080fd5b50919050565b6000806000806000806000806000806101208b8d03121561148157600080fd5b61148a8b61141c565b995060208b013567ffffffffffffffff808211156114a757600080fd5b6114b38e838f0161137e565b909b50995060408d01359150808211156114cc57600080fd5b6114d88e838f0161137e565b909950975060608d01359150808211156114f157600080fd5b6114fd8e838f0161137e565b909750955060808d013591508082111561151657600080fd5b506115238d828e0161137e565b909450925061153790508c60a08d01611449565b90509295989b9194979a5092959850565b803560ff8116811461142757600080fd5b60008060006060848603121561156e57600080fd5b833561157981611369565b925061158760208501611548565b9150604084013561159781611369565b809150509250925092565b6000815180845260005b818110156115c8576020818501810151868301820152016115ac565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151151560208201526001600160a01b0360208301511660408201526000604083015160c0606084015261162360e08401826115a2565b90506060840151601f198085840301608086015261164183836115a2565b925060808601519150808584030160a086015261165e83836115a2565b925060a08601519150808584030160c08601525061167c82826115a2565b95945050505050565b6000806040838503121561169857600080fd5b82356116a381611369565b91506116b160208401611548565b90509250929050565b600080604083850312156116cd57600080fd5b82356116d881611369565b915060208301356116e881611369565b809150509250929050565b8035801515811461142757600080fd5b6000806000806000806000806000806000806101008d8f03121561172657600080fd5b61172f8d6116f3565b9b5067ffffffffffffffff60208e0135111561174a57600080fd5b61175a8e60208f01358f0161137e565b909b50995067ffffffffffffffff60408e0135111561177857600080fd5b6117888e60408f01358f0161137e565b909950975067ffffffffffffffff60608e013511156117a657600080fd5b6117b68e60608f01358f0161137e565b909750955067ffffffffffffffff60808e013511156117d457600080fd5b6117e48e60808f01358f0161137e565b90955093506117f560a08e01611548565b925061180360c08e0161141c565b915061181160e08e0161141c565b90509295989b509295989b509295989b565b600080600080600080600080600060a08a8c03121561184157600080fd5b61184a8a6116f3565b985060208a013567ffffffffffffffff8082111561186757600080fd5b6118738d838e0161137e565b909a50985060408c013591508082111561188c57600080fd5b6118988d838e0161137e565b909850965060608c01359150808211156118b157600080fd5b6118bd8d838e0161137e565b909650945060808c01359150808211156118d657600080fd5b506118e38c828d0161137e565b915080935050809150509295985092959850929598565b600181811c9082168061190e57607f821691505b60208210810361145b57634e487b7160e01b600052602260045260246000fd5b60006020828403121561194057600080fd5b610b9b826116f3565b634e487b7160e01b600052604160045260246000fd5b601f821115610c39576000816000526020600020601f850160051c810160208610156119885750805b601f850160051c820191505b818110156119a757828155600101611994565b505050505050565b815167ffffffffffffffff8111156119c9576119c9611949565b6119dd816119d784546118fa565b8461195f565b602080601f831160018114611a1257600084156119fa5750858301515b600019600386901b1c1916600185901b1785556119a7565b600085815260208120601f198616915b82811015611a4157888601518255948401946001909101908401611a22565b5085821015611a5f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000611aac608083018a8c611a6f565b8281036020840152611abf81898b611a6f565b90508281036040840152611ad4818789611a6f565b90508281036060840152611ae9818587611a6f565b9b9a5050505050505050505050565b600060208284031215611b0a57600080fd5b610b9b82611548565b604081526000808554611b25816118fa565b8060408601526060600180841660008114611b475760018114611b6357611b95565b60ff1985166060890152606084151560051b8901019550611b95565b8a60005260208060002060005b86811015611b8b5781548b8201870152908401908201611b70565b8a01606001975050505b50505050508281036020840152611bad818587611a6f565b9695505050505050565b67ffffffffffffffff831115611bcf57611bcf611949565b611be383611bdd83546118fa565b8361195f565b6000601f841160018114611c175760008515611bff5750838201355b600019600387901b1c1916600186901b178355610cc7565b600083815260209020601f19861690835b82811015611c485786850135825560209485019460019092019101611c28565b5086821015611c655760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b608081526000611cb660808301876115a2565b8281036020840152611cc881876115a2565b90508281036040840152611cdc81866115a2565b90508281036060840152611cf081856115a2565b97965050505050505056fea164736f6c6343000817000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063cc34e0fa11610081578063ead4d4c211610066578063ead4d4c21461029a578063f2fde38b146102ad578063f7c27c28146102c057600080fd5b8063cc34e0fa14610274578063cd149acb1461028757600080fd5b80638da5cb5b1461021157806392b0a57f14610222578063b9d36dde1461024e578063bc03b4ae1461026157600080fd5b8063516158b1116100ee578063516158b11461018b578063715018a6146101ab57806373190ca5146101b35780637b4ed185146101d657600080fd5b806304a1fc8c1461012057806307f28274146101505780632f6e029b146101635780634d65526414610178575b600080fd5b61013361012e3660046113c7565b6102fb565b6040516001600160a01b0390911681526020015b60405180910390f35b61013361015e36600461142c565b610310565b610176610171366004611461565b610381565b005b610176610186366004611559565b6107cf565b61019e61019936600461142c565b610842565b60405161014791906115e8565b610176610b16565b6101c66101c1366004611685565b610b2a565b6040519015158152602001610147565b6101336101e4366004611685565b6001600160a01b03918216600090815260036020908152604080832060ff94909416835292905220541690565b6000546001600160a01b0316610133565b6101c661023036600461142c565b6001600160a01b031660009081526001602052604090205460ff1690565b61017661025c3660046116ba565b610ba2565b61017661026f3660046113c7565b610c3e565b610133610282366004611703565b610cce565b610176610295366004611559565b610dbc565b6101336102a8366004611823565b610e2f565b6101766102bb36600461142c565b610e50565b6101336102ce366004611685565b6001600160a01b03918216600090815260026020908152604080832060ff94909416835292905220541690565b6000610308848484610ee5565b949350505050565b600061031b82610f1c565b61032757506000919050565b6001600160a01b038281166000908152600160205260409020546101009004161561037057506001600160a01b0390811660009081526001602052604090205461010090041690565b50506000546001600160a01b031690565b610389610f4b565b6001600160a01b038a1660009081526001602081905260409091200180546103b0906118fa565b1590506103cf5760405162a0b14560e31b815260040160405180910390fd5b60008890036103f0576040516228eb7360e41b815260040160405180910390fd5b6040805160c0810190915280610409602084018461192e565b1515815260200160006001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250604080516020601f87018190048102820181019092528581529181019190869086908190840183828082843760009201829052509390945250506001600160a01b038d8116825260016020818152604093849020865181549288015174ffffffffffffffffffffffffffffffffffffffffff1990931690151574ffffffffffffffffffffffffffffffffffffffff001916176101009290941691909102929092178255918401519092509082019061058790826119af565b506060820151600282019061059c90826119af565b50608082015160038201906105b190826119af565b5060a082015160048201906105c690826119af565b5090505060006001600160a01b03168a6001600160a01b03167fb2bcfea53e9652103d965febf849a5cbfee6074470a6e9efb080cdfb4ff850868b8b8b8b8b8b8b8b60405161061c989796959493929190611a98565b60405180910390a3610634606082016040830161142c565b6001600160a01b038b166000908152600260209081526040808320929161065f918601908601611af8565b60ff1681526020810191909152604090810160002080546001600160a01b0319166001600160a01b0393909316929092179091556106a3906060830190830161142c565b6001600160a01b03166106bc6040830160208401611af8565b60ff168b6001600160a01b03167f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a260405160405180910390a4610705608082016060830161142c565b6001600160a01b038b1660009081526003602090815260408083209291610730918601908601611af8565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055610771608082016060830161142c565b6001600160a01b031661078a6040830160208401611af8565b60ff168b6001600160a01b03167f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97960405160405180910390a450505050505050505050565b826107d981610fa5565b6001600160a01b03848116600081815260036020908152604080832060ff8916808552925280832080546001600160a01b0319169588169586179055519092917f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97991a450505050565b6108866040518060c0016040528060001515815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b03808316600090815260016020818152604092839020835160c081018552815460ff811615158252610100900490951691850191909152908101805491928401916108d7906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610903906118fa565b80156109505780601f1061092557610100808354040283529160200191610950565b820191906000526020600020905b81548152906001019060200180831161093357829003601f168201915b50505050508152602001600282018054610969906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610995906118fa565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081526020016003820180546109fb906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610a27906118fa565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b50505050508152602001600482018054610a8d906118fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab9906118fa565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b5050505050815250509050919050565b610b1e610f4b565b610b286000611059565b565b6000610b3583610f1c565b8015610b6857506001600160a01b03838116600090815260026020908152604080832060ff871684529091529020541615155b8015610b9b57506001600160a01b03838116600090815260036020908152604080832060ff871684529091529020541615155b9392505050565b81610bac81610fa5565b6001600160a01b0383811660009081526001602052604090205461010090041615610c39576001600160a01b03838116600081815260016020526040808220805474ffffffffffffffffffffffffffffffffffffffff001916610100958816958602179055513392917f17ae17210ed3ecea7d066711730c938a5c899e513e64d1a18fe2441bb0aaf6f691a45b505050565b82610c4881610fa5565b6001600160a01b0384166000818152600160205260409081902090517f6a9bcdc77ef7c5aa7f5712387612ce38f1d439e5ce38fa234f09a3a9edd313d791610c999160049091019087908790611b13565b60405180910390a26001600160a01b0384166000908152600160205260409020600401610cc7838583611bb7565b5050505050565b600080610ce28e8e8e8e8e8e8e8e8e6110a9565b6001600160a01b03818116600081815260026020908152604080832060ff8c16808552925280832080546001600160a01b031916958b1695861790555194955092937f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a29190a46001600160a01b03818116600081815260036020908152604080832060ff8b16808552925280832080546001600160a01b0319169589169586179055519092917f0c30e42aba76b189f0e851b79c24d77b67a0dbd8c3b18ae6da6fa3aae73eb97991a49d9c50505050505050505050505050565b82610dc681610fa5565b6001600160a01b03848116600081815260026020908152604080832060ff8916808552925280832080546001600160a01b0319169588169586179055519092917f4a8809aceedac9e9d8e5832664f874cd776affbc8e6dba254e807f6f986d43a291a450505050565b6000610e428a8a8a8a8a8a8a8a8a6110a9565b9a9950505050505050505050565b610e58610f4b565b6001600160a01b038116610ed95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610ee281611059565b50565b6000838383604051602001610efc93929190611c77565b60408051601f198184030181529190528051602090910120949350505050565b6001600160a01b03811660009081526001602081905260408220018054610f42906118fa565b15159392505050565b6000546001600160a01b03163314610b285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ed0565b610fae81610f1c565b610fcb5760405163d565201560e01b815260040160405180910390fd5b6001600160a01b0381811660009081526001602052604090205461010090041661101a576000546001600160a01b03163314610ee25760405163bb7245e360e01b815260040160405180910390fd5b6001600160a01b038181166000908152600160205260409020546101009004163314610ee25760405163bb7245e360e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806110b7338b8b610ee5565b6001600160a01b0381166000908152600160208190526040909120018054919250906110e2906118fa565b1590506111015760405162a0b14560e31b815260040160405180910390fd5b6000899003611122576040516228eb7360e41b815260040160405180910390fd5b60006040518060c001604052808d15158152602001336001600160a01b031681526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8d018190048102820181019092528b815291810191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f89018190048102820181019092528781529181019190889088908190840183828082843760009201829052509390945250506001600160a01b03858116825260016020818152604093849020865181549288015174ffffffffffffffffffffffffffffffffffffffffff1990931690151574ffffffffffffffffffffffffffffffffffffffff001916176101009290941691909102929092178255918401519394508493909250908201906112b290826119af565b50606082015160028201906112c790826119af565b50608082015160038201906112dc90826119af565b5060a082015160048201906112f190826119af565b5090505080602001516001600160a01b0316826001600160a01b03167fb2bcfea53e9652103d965febf849a5cbfee6074470a6e9efb080cdfb4ff850868360400151846060015185608001518660a001516040516113529493929190611ca3565b60405180910390a3509a9950505050505050505050565b6001600160a01b0381168114610ee257600080fd5b60008083601f84011261139057600080fd5b50813567ffffffffffffffff8111156113a857600080fd5b6020830191508360208285010111156113c057600080fd5b9250929050565b6000806000604084860312156113dc57600080fd5b83356113e781611369565b9250602084013567ffffffffffffffff81111561140357600080fd5b61140f8682870161137e565b9497909650939450505050565b803561142781611369565b919050565b60006020828403121561143e57600080fd5b8135610b9b81611369565b60006080828403121561145b57600080fd5b50919050565b6000806000806000806000806000806101208b8d03121561148157600080fd5b61148a8b61141c565b995060208b013567ffffffffffffffff808211156114a757600080fd5b6114b38e838f0161137e565b909b50995060408d01359150808211156114cc57600080fd5b6114d88e838f0161137e565b909950975060608d01359150808211156114f157600080fd5b6114fd8e838f0161137e565b909750955060808d013591508082111561151657600080fd5b506115238d828e0161137e565b909450925061153790508c60a08d01611449565b90509295989b9194979a5092959850565b803560ff8116811461142757600080fd5b60008060006060848603121561156e57600080fd5b833561157981611369565b925061158760208501611548565b9150604084013561159781611369565b809150509250925092565b6000815180845260005b818110156115c8576020818501810151868301820152016115ac565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151151560208201526001600160a01b0360208301511660408201526000604083015160c0606084015261162360e08401826115a2565b90506060840151601f198085840301608086015261164183836115a2565b925060808601519150808584030160a086015261165e83836115a2565b925060a08601519150808584030160c08601525061167c82826115a2565b95945050505050565b6000806040838503121561169857600080fd5b82356116a381611369565b91506116b160208401611548565b90509250929050565b600080604083850312156116cd57600080fd5b82356116d881611369565b915060208301356116e881611369565b809150509250929050565b8035801515811461142757600080fd5b6000806000806000806000806000806000806101008d8f03121561172657600080fd5b61172f8d6116f3565b9b5067ffffffffffffffff60208e0135111561174a57600080fd5b61175a8e60208f01358f0161137e565b909b50995067ffffffffffffffff60408e0135111561177857600080fd5b6117888e60408f01358f0161137e565b909950975067ffffffffffffffff60608e013511156117a657600080fd5b6117b68e60608f01358f0161137e565b909750955067ffffffffffffffff60808e013511156117d457600080fd5b6117e48e60808f01358f0161137e565b90955093506117f560a08e01611548565b925061180360c08e0161141c565b915061181160e08e0161141c565b90509295989b509295989b509295989b565b600080600080600080600080600060a08a8c03121561184157600080fd5b61184a8a6116f3565b985060208a013567ffffffffffffffff8082111561186757600080fd5b6118738d838e0161137e565b909a50985060408c013591508082111561188c57600080fd5b6118988d838e0161137e565b909850965060608c01359150808211156118b157600080fd5b6118bd8d838e0161137e565b909650945060808c01359150808211156118d657600080fd5b506118e38c828d0161137e565b915080935050809150509295985092959850929598565b600181811c9082168061190e57607f821691505b60208210810361145b57634e487b7160e01b600052602260045260246000fd5b60006020828403121561194057600080fd5b610b9b826116f3565b634e487b7160e01b600052604160045260246000fd5b601f821115610c39576000816000526020600020601f850160051c810160208610156119885750805b601f850160051c820191505b818110156119a757828155600101611994565b505050505050565b815167ffffffffffffffff8111156119c9576119c9611949565b6119dd816119d784546118fa565b8461195f565b602080601f831160018114611a1257600084156119fa5750858301515b600019600386901b1c1916600185901b1785556119a7565b600085815260208120601f198616915b82811015611a4157888601518255948401946001909101908401611a22565b5085821015611a5f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000611aac608083018a8c611a6f565b8281036020840152611abf81898b611a6f565b90508281036040840152611ad4818789611a6f565b90508281036060840152611ae9818587611a6f565b9b9a5050505050505050505050565b600060208284031215611b0a57600080fd5b610b9b82611548565b604081526000808554611b25816118fa565b8060408601526060600180841660008114611b475760018114611b6357611b95565b60ff1985166060890152606084151560051b8901019550611b95565b8a60005260208060002060005b86811015611b8b5781548b8201870152908401908201611b70565b8a01606001975050505b50505050508281036020840152611bad818587611a6f565b9695505050505050565b67ffffffffffffffff831115611bcf57611bcf611949565b611be383611bdd83546118fa565b8361195f565b6000601f841160018114611c175760008515611bff5750838201355b600019600387901b1c1916600186901b178355610cc7565b600083815260209020601f19861690835b82811015611c485786850135825560209485019460019092019101611c28565b5086821015611c655760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b608081526000611cb660808301876115a2565b8281036020840152611cc881876115a2565b90508281036040840152611cdc81866115a2565b90508281036060840152611cf081856115a2565b97965050505050505056fea164736f6c6343000817000a",
  "devdoc": {
    "details": "A contract that allows the registration of credential types.      Credential types are unique per creator and type name.",
    "events": {
      "TypeAdminTransferred(uint160,address,address)": {
        "details": "Emitted when the admin of a type is transferred",
        "params": {
          "newAdmin": "address of the new admin",
          "oldAdmin": "address of the old admin",
          "typeID": "type id"
        }
      },
      "TypePublicSignalGetterUpdated(uint160,uint8,address)": {
        "details": "Emitted when the intrinsic signal indexes are updated for a type",
        "params": {
          "publicSignalGetter": "address of the public signal getter",
          "typeID": "type id",
          "verificationStackID": "verification stack id"
        }
      },
      "TypeRegistered(uint160,address,string,string,string,string)": {
        "details": "Emitted when a new type is registered",
        "params": {
          "admin": "Address of the admin of the type.",
          "definition": "Immutable definition of the type",
          "description": "Immutable description of the type",
          "name": "Name of the type",
          "resourceURI": "Mutable resource URI for the type",
          "typeID": "Unique identifier for the registered type"
        }
      },
      "TypeResourceURIUpdated(uint160,string,string)": {
        "details": "Emitted when the resource URI of a type is updated",
        "params": {
          "newResourceURI": "The new resource URI",
          "oldResourceURI": "The previous resource URI",
          "typeID": "Unique identifier for the type being updated"
        }
      },
      "TypeVerifierUpdated(uint160,uint8,address)": {
        "details": "Emitted when a proof verifier is updated for a type",
        "params": {
          "typeID": "type id",
          "verificationStackID": "verification stack id",
          "verifier": "address of the verifier"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calcTypeID(address,string)": {
        "details": "calculate the typeID of a type"
      },
      "constructor": {
        "params": {
          "admin": "admin of the contract"
        }
      },
      "getPublicSignalGetter(uint160,uint8)": {
        "params": {
          "typeId": "type id of the type",
          "verificationStackId": "verification stack id"
        }
      },
      "getType(uint160)": {
        "details": "get the type for the given typeID"
      },
      "getTypeAdmin(uint160)": {
        "details": "Retrieve the admin of a type",
        "params": {
          "typeId": "type id of the type"
        },
        "returns": {
          "_0": "address of the admin of the type"
        }
      },
      "getVerifier(uint160,uint8)": {
        "details": "get the verifier for the given typeID and verificationStackID."
      },
      "isRevocable(uint160)": {
        "details": "check if the type is revocable"
      },
      "isTypeFullyInitializedForStack(uint160,uint8)": {
        "details": "check if the type is fully initialized for the given verification stack.",
        "params": {
          "typeId": "id of the type",
          "verificationStackId": "id the verification stack"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerType(bool,string,string,string,string)": {
        "details": "register a new type by msg.sender",
        "params": {
          "definition": "type definition string, immutable",
          "description": "description of the type, immutable",
          "name": "type name",
          "resourceURI": "resource URI of the type, mutable"
        },
        "returns": {
          "_0": "typeID of the registered type"
        }
      },
      "registerType1Step(bool,string,string,string,string,uint8,address,address)": {
        "params": {
          "definition": "Immutable type definition string",
          "description": "Description of the type",
          "name": "Type name",
          "publicSignalGetter": "public signal getter for the type",
          "resourceURI": "Mutable resource URI of the type",
          "verifier": "verifier for the type"
        },
        "returns": {
          "_0": "typeID Unique identifier of the registered type"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setPrimitiveType(uint160,string,string,string,string,(bool,uint8,address,address))": {
        "params": {
          "config": "misc config for the type",
          "definition": "definition string",
          "description": "description of the type",
          "name": "name of the type",
          "resourceURI": "mutable resource URI of the type",
          "typeId": "the type id of the primitive type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTypeAdmin(uint160,address)": {
        "details": "transfer the ownership of a type.",
        "params": {
          "newAdmin": "address of the new admin",
          "typeId": "type id of the type"
        }
      },
      "updateTypePublicSignalGetter(uint160,uint8,address)": {
        "details": "update the public signal getter for a type",
        "params": {
          "getter": "the address of the public signal getter",
          "typeId": "id of the type",
          "verificationStackId": "id of the verification stack"
        }
      },
      "updateTypeResourceURI(uint160,string)": {
        "details": "update the resource URI of a type",
        "params": {
          "typeId": "of the type",
          "uri": "new resource URI TODO: resource URI specifcation: support multiple verification stack."
        }
      },
      "updateTypeVerifier(uint160,uint8,address)": {
        "details": "update the verifier for a type"
      }
    },
    "stateVariables": {
      "_credTypes": {
        "details": "mapping from typeID to CredentialType."
      },
      "_psGetters": {
        "details": "mapping from typeID to its verification stack's intrinsic value .verifier typeID => verificationStackID => verifier"
      },
      "_verifiers": {
        "details": "mapping from typeID to its verification stack's verifier.verifier typeID => verificationStackID => verifier"
      }
    },
    "title": "TypeRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerType1Step(bool,string,string,string,string,uint8,address,address)": {
        "notice": "Register a new type by `msg.sender` with verifier and public signal getter set for a specific verification stack."
      },
      "setPrimitiveType(uint160,string,string,string,string,(bool,uint8,address,address))": {
        "notice": "set a primitive type, only callable by the admin."
      }
    },
    "notice": "Getters in this contract does not do any parameter validation,         so callers should validate the inputs and outputs and uninitialized values will be zero.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TypeRegistry.sol:TypeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1058,
        "contract": "contracts/TypeRegistry.sol:TypeRegistry",
        "label": "_credTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint160,t_struct(CredentialType)5116_storage)"
      },
      {
        "astId": 1066,
        "contract": "contracts/TypeRegistry.sol:TypeRegistry",
        "label": "_verifiers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint160,t_mapping(t_uint8,t_contract(IProofVerifier)4981))"
      },
      {
        "astId": 1074,
        "contract": "contracts/TypeRegistry.sol:TypeRegistry",
        "label": "_psGetters",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint160,t_mapping(t_uint8,t_contract(IPublicSignalGetter)5007))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IProofVerifier)4981": {
        "encoding": "inplace",
        "label": "contract IProofVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IPublicSignalGetter)5007": {
        "encoding": "inplace",
        "label": "contract IPublicSignalGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint160,t_mapping(t_uint8,t_contract(IProofVerifier)4981))": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => mapping(uint8 => contract IProofVerifier))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_contract(IProofVerifier)4981)"
      },
      "t_mapping(t_uint160,t_mapping(t_uint8,t_contract(IPublicSignalGetter)5007))": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => mapping(uint8 => contract IPublicSignalGetter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_contract(IPublicSignalGetter)5007)"
      },
      "t_mapping(t_uint160,t_struct(CredentialType)5116_storage)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => struct CredentialType)",
        "numberOfBytes": "32",
        "value": "t_struct(CredentialType)5116_storage"
      },
      "t_mapping(t_uint8,t_contract(IProofVerifier)4981)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IProofVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IProofVerifier)4981"
      },
      "t_mapping(t_uint8,t_contract(IPublicSignalGetter)5007)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IPublicSignalGetter)",
        "numberOfBytes": "32",
        "value": "t_contract(IPublicSignalGetter)5007"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CredentialType)5116_storage": {
        "encoding": "inplace",
        "label": "struct CredentialType",
        "members": [
          {
            "astId": 5105,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "revocable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5107,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "admin",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5109,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5111,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "definition",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5113,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 5115,
            "contract": "contracts/TypeRegistry.sol:TypeRegistry",
            "label": "resourceURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}