{
  "address": "0x4B8794e78E27B8eb9d57E7566E657C23C747f3b4",
  "abi": [
    {
      "inputs": [],
      "name": "AliasedPublicSignal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getVerificationKeys",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "isAliased",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_proofs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f49cc09484b905ae2292b2858dd75cb51dcdd314c2f388837ede8c9849bb3c0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xb85b3D61439a3d70D3DF7913a3A764F352b32C55",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1137310",
    "logsBloom": "0x
    "blockHash": "0x4490b67d06826efb5b01b9a47b031491a9636702bf0ecba08f3d1e5331bd8a04",
    "transactionHash": "0x9f49cc09484b905ae2292b2858dd75cb51dcdd314c2f388837ede8c9849bb3c0",
    "logs": [],
    "blockNumber": 37,
    "cumulativeGasUsed": "1137310",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e08d6b930820ab219ef1afbfaba72b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AliasedPublicSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getVerificationKeys\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"isAliased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getVerificationKeys()\":{\"details\":\"returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs..\"},\"isAliased(uint256[])\":{\"details\":\"return true if the public signal is aliased\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/primitive/unit_verifier.sol\":\"BabyZKGroth16UnitVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/primitive/unit_verifier.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright (c) 2021 0KIMS association.\\n    Copyright (c) [2024] Galxe.com.\\n\\n    Modifications to this file are part of the Galxe Identity Protocol SDK,\\n    which is built using the snarkJS template and is subject to the GNU\\n    General Public License v3.0.\\n\\n    snarkJS is free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract BabyZKGroth16UnitVerifier {\\n    error AliasedPublicSignal();\\n\\n    // Scalar field size\\n    uint256 constant r   = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 15637418380756236601718213192255613136045919407816081601661261207618084073597;\\n    uint256 constant deltax2 = 16569784677986731884848814767977081422246581497389376666284070100669021849313;\\n    uint256 constant deltay1 = 17775141888156869748745527945157624548875521553021038167785799262294965116348;\\n    uint256 constant deltay2 = 3246184716089128973746765775249737516048676435198106546989660202706440984521;\\n\\n    uint256 constant IC0x = 4990317659614575818156037472214188417509096922233331003555642014823238651184;\\n    uint256 constant IC0y = 14469248329543848838153834859360699519345616103861941229956057140145693492508;\\n    uint256 constant IC1x = 10837138624576207424789978193086542153499320344753530437477168438248082178960;\\n    uint256 constant IC1y = 917015773848957701033958467874666708682927187095469719889324478895656869516;\\n    uint256 constant IC2x = 5037499117481750214477112555364145021274012966256645948893036512248435385840;\\n    uint256 constant IC2y = 19826826480151452757007846213434794238926452546710485787711011712233552633495;\\n    uint256 constant IC3x = 20945528997632428738612501906743782336475532295455403104686278305604488099835;\\n    uint256 constant IC3y = 20744191411948171901695905522237963923426425453283062602166914445806285227301;\\n    uint256 constant IC4x = 8513991002836348269358097045344942553237626798000929884704947463798784967405;\\n    uint256 constant IC4y = 19338209321160679542018365847622795887832971526814598737666811533118912666856;\\n    uint256 constant IC5x = 3569844613050455610552335538126280293963365442570334539158228936972825900539;\\n    uint256 constant IC5y = 16528366039144804325194354617729911304908458001966274902042903564466963990992;\\n    uint256 constant IC6x = 1570945769731720797444624982944778925162368447218125765326050361254312822358;\\n    uint256 constant IC6y = 2602548857774106882745290052940216670975889108043343483573122286840504404756;\\n    uint256 constant IC7x = 21301906662599840990524780602285271554623267433315428422652065889924533228332;\\n    uint256 constant IC7y = 11716127211538228300463074562279867241595264693476507064906125029152968407192;\\n    uint256 constant IC8x = 11201724637271039764798623441350903487110912630994328063735802041659149290802;\\n    uint256 constant IC8y = 9584899601398928135093189759789914293671858783478336033800854558608680407297;\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    uint16 constant proofLength = 8;\\n    uint32 constant pubSignalLength = 8;\\n\\n    /// @dev returns the verification keys in the order that the verifier expects them:\\n    /// alpha, beta, gamma, delta, ICs..\\n    function getVerificationKeys() public pure returns (uint[] memory) {\\n        uint[] memory vks = new uint[](16 + pubSignalLength * 2);\\n        vks[0] = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n        vks[1] = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n        vks[2] = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n        vks[3] = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n        vks[4] = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n        vks[5] = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n        vks[6] = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n        vks[7] = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n        vks[8] = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n        vks[9] = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n        vks[10] = 15637418380756236601718213192255613136045919407816081601661261207618084073597;\\n        vks[11] = 16569784677986731884848814767977081422246581497389376666284070100669021849313;\\n        vks[12] = 17775141888156869748745527945157624548875521553021038167785799262294965116348;\\n        vks[13] = 3246184716089128973746765775249737516048676435198106546989660202706440984521;\\n        vks[14] = 4990317659614575818156037472214188417509096922233331003555642014823238651184;\\n        vks[15] = 14469248329543848838153834859360699519345616103861941229956057140145693492508;\\n        vks[16] = 10837138624576207424789978193086542153499320344753530437477168438248082178960;\\n        vks[17] = 917015773848957701033958467874666708682927187095469719889324478895656869516;\\n        vks[18] = 5037499117481750214477112555364145021274012966256645948893036512248435385840;\\n        vks[19] = 19826826480151452757007846213434794238926452546710485787711011712233552633495;\\n        vks[20] = 20945528997632428738612501906743782336475532295455403104686278305604488099835;\\n        vks[21] = 20744191411948171901695905522237963923426425453283062602166914445806285227301;\\n        vks[22] = 8513991002836348269358097045344942553237626798000929884704947463798784967405;\\n        vks[23] = 19338209321160679542018365847622795887832971526814598737666811533118912666856;\\n        vks[24] = 3569844613050455610552335538126280293963365442570334539158228936972825900539;\\n        vks[25] = 16528366039144804325194354617729911304908458001966274902042903564466963990992;\\n        vks[26] = 1570945769731720797444624982944778925162368447218125765326050361254312822358;\\n        vks[27] = 2602548857774106882745290052940216670975889108043343483573122286840504404756;\\n        vks[28] = 21301906662599840990524780602285271554623267433315428422652065889924533228332;\\n        vks[29] = 11716127211538228300463074562279867241595264693476507064906125029152968407192;\\n        vks[30] = 11201724637271039764798623441350903487110912630994328063735802041659149290802;\\n        vks[31] = 9584899601398928135093189759789914293671858783478336033800854558608680407297;\\n        return vks;\\n    }\\n\\n    /// @dev return true if the public signal is aliased\\n    function isAliased(uint[] calldata _pubSignals) public pure returns (bool) {\\n        // Alias check\\n        if (_pubSignals[0] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[1] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[2] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[3] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[4] >= 452312848583266388373324160190187140051835877600158453279131187530910662656) { return true; }\\n        if (_pubSignals[5] >= 18446744073709551616) { return true; }\\n        if (_pubSignals[6] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[7] >= 904625697166532776746648320380374280103671755200316906558262375061821325312) { return true; }\\n        return false;\\n    }\\n\\n    function verifyProof(uint[] calldata _proofs, uint[] calldata _pubSignals) public view returns (bool) {\\n        // Check Argument\\n        require(_proofs.length == proofLength, \\\"Invalid proof\\\");\\n        require(_pubSignals.length == pubSignalLength, \\\"Invalid public signal\\\");\\n        if (isAliased(_pubSignals)) { return false; }\\n        assembly {\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination it.vkey.vk_x\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // it.vkey.vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_proofs.offset, add(_proofs.offset, 64), add(_proofs.offset, 192), _pubSignals.offset, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02b6b3e171d7bd45d2911a3190a44543956a36b43fe29f442e804549de2572c4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getVerificationKeys()": {
        "details": "returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs.."
      },
      "isAliased(uint256[])": {
        "details": "return true if the public signal is aliased"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}