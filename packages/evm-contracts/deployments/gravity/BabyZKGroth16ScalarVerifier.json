{
  "address": "0x1ec111fc8aEAcCD989d6F7c556b12575cAc3a7E0",
  "abi": [
    {
      "inputs": [],
      "name": "AliasedPublicSignal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getVerificationKeys",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "isAliased",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_proofs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8906f3bfd5b3d81bb63b184e927f1301561ff35264dbdd373dd57b9cffd9d60a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xb85b3D61439a3d70D3DF7913a3A764F352b32C55",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1246863",
    "logsBloom": "0x
    "blockHash": "0x4f96c40f81d6f99e9add50f42a08ce29521b0382a95607b039d342c987f52c8e",
    "transactionHash": "0x8906f3bfd5b3d81bb63b184e927f1301561ff35264dbdd373dd57b9cffd9d60a",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "1246863",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e08d6b930820ab219ef1afbfaba72b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AliasedPublicSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getVerificationKeys\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"isAliased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getVerificationKeys()\":{\"details\":\"returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs..\"},\"isAliased(uint256[])\":{\"details\":\"return true if the public signal is aliased\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/primitive/scalar_verifier.sol\":\"BabyZKGroth16ScalarVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/primitive/scalar_verifier.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright (c) 2021 0KIMS association.\\n    Copyright (c) [2024] Galxe.com.\\n\\n    Modifications to this file are part of the Galxe Identity Protocol SDK,\\n    which is built using the snarkJS template and is subject to the GNU\\n    General Public License v3.0.\\n\\n    snarkJS is free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract BabyZKGroth16ScalarVerifier {\\n    error AliasedPublicSignal();\\n\\n    // Scalar field size\\n    uint256 constant r   = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11386766365824379679527974311800739296620166334678560777819386094772738908117;\\n    uint256 constant deltax2 = 5914602868708600112219413104636571687761738884936609474954954410582503098408;\\n    uint256 constant deltay1 = 4651652966715538918037908003920688590707225453456401092100837651799858508873;\\n    uint256 constant deltay2 = 5750097786758545771271419578462125638542345819747228567491655641926808625820;\\n\\n    uint256 constant IC0x = 19718694483962552457546703022943755844960272065236852983483449121878944032229;\\n    uint256 constant IC0y = 19277224091235934629720467697154129029409763052492419487195354501450906873293;\\n    uint256 constant IC1x = 11524898445759539751988664644643984354080320377887036267619838360664088041388;\\n    uint256 constant IC1y = 12052476618631930474450519376758323338799389525512264273381315623349871320459;\\n    uint256 constant IC2x = 1796432713996171209429206469628339720979571370972673842341066237052302144708;\\n    uint256 constant IC2y = 15910694945325453731816254570140821145883366324705775641131332163142393553430;\\n    uint256 constant IC3x = 13301490279450482586102948347778809500550800419089382713271598741737846927098;\\n    uint256 constant IC3y = 14259881931883214004278332811480412945774487191113970531745254373843301815030;\\n    uint256 constant IC4x = 1207500870815263464967774976312359598755762009848827143199201686666476624758;\\n    uint256 constant IC4y = 8435967651447070421240072360683620289857808299003263625530661340454266925495;\\n    uint256 constant IC5x = 20596312126307507544254706071585116472086770107182790995667405884937786149072;\\n    uint256 constant IC5y = 20101366561967269911230004725117599795346838430903241466492512719716156452494;\\n    uint256 constant IC6x = 17526481656940755408681043575718606969101388584842965003168213187937318841363;\\n    uint256 constant IC6y = 13265795018345573998790937061244260230280148075859101413091614551080502238943;\\n    uint256 constant IC7x = 8797399508837900954995623995490844490558692290611898196384918943481136881246;\\n    uint256 constant IC7y = 1189204587490882345729074991940308020536737538799963545904189346677112172621;\\n    uint256 constant IC8x = 17425938981588937088170006395579119680236927961246903247977312401168286974480;\\n    uint256 constant IC8y = 5313672417270749056228790951665922810430694276452143630621001803078527956704;\\n    uint256 constant IC9x = 21558569413462776597053285568737324938159130522610738437830367783496513501490;\\n    uint256 constant IC9y = 12326766729916800830567908978618969396776317942337594117075699985152575345284;\\n    uint256 constant IC10x = 6395915430939619962955569365706969975441352219959453609660666075170686062244;\\n    uint256 constant IC10y = 8282983962149557587079522102277232822891054043805116932692253318963003844810;\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    uint16 constant proofLength = 8;\\n    uint32 constant pubSignalLength = 10;\\n\\n    /// @dev returns the verification keys in the order that the verifier expects them:\\n    /// alpha, beta, gamma, delta, ICs..\\n    function getVerificationKeys() public pure returns (uint[] memory) {\\n        uint[] memory vks = new uint[](16 + pubSignalLength * 2);\\n        vks[0] = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n        vks[1] = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n        vks[2] = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n        vks[3] = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n        vks[4] = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n        vks[5] = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n        vks[6] = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n        vks[7] = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n        vks[8] = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n        vks[9] = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n        vks[10] = 11386766365824379679527974311800739296620166334678560777819386094772738908117;\\n        vks[11] = 5914602868708600112219413104636571687761738884936609474954954410582503098408;\\n        vks[12] = 4651652966715538918037908003920688590707225453456401092100837651799858508873;\\n        vks[13] = 5750097786758545771271419578462125638542345819747228567491655641926808625820;\\n        vks[14] = 19718694483962552457546703022943755844960272065236852983483449121878944032229;\\n        vks[15] = 19277224091235934629720467697154129029409763052492419487195354501450906873293;\\n        vks[16] = 11524898445759539751988664644643984354080320377887036267619838360664088041388;\\n        vks[17] = 12052476618631930474450519376758323338799389525512264273381315623349871320459;\\n        vks[18] = 1796432713996171209429206469628339720979571370972673842341066237052302144708;\\n        vks[19] = 15910694945325453731816254570140821145883366324705775641131332163142393553430;\\n        vks[20] = 13301490279450482586102948347778809500550800419089382713271598741737846927098;\\n        vks[21] = 14259881931883214004278332811480412945774487191113970531745254373843301815030;\\n        vks[22] = 1207500870815263464967774976312359598755762009848827143199201686666476624758;\\n        vks[23] = 8435967651447070421240072360683620289857808299003263625530661340454266925495;\\n        vks[24] = 20596312126307507544254706071585116472086770107182790995667405884937786149072;\\n        vks[25] = 20101366561967269911230004725117599795346838430903241466492512719716156452494;\\n        vks[26] = 17526481656940755408681043575718606969101388584842965003168213187937318841363;\\n        vks[27] = 13265795018345573998790937061244260230280148075859101413091614551080502238943;\\n        vks[28] = 8797399508837900954995623995490844490558692290611898196384918943481136881246;\\n        vks[29] = 1189204587490882345729074991940308020536737538799963545904189346677112172621;\\n        vks[30] = 17425938981588937088170006395579119680236927961246903247977312401168286974480;\\n        vks[31] = 5313672417270749056228790951665922810430694276452143630621001803078527956704;\\n        vks[32] = 21558569413462776597053285568737324938159130522610738437830367783496513501490;\\n        vks[33] = 12326766729916800830567908978618969396776317942337594117075699985152575345284;\\n        vks[34] = 6395915430939619962955569365706969975441352219959453609660666075170686062244;\\n        vks[35] = 8282983962149557587079522102277232822891054043805116932692253318963003844810;\\n        return vks;\\n    }\\n\\n    /// @dev return true if the public signal is aliased\\n    function isAliased(uint[] calldata _pubSignals) public pure returns (bool) {\\n        // Alias check\\n        if (_pubSignals[0] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[1] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[2] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[3] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[4] >= 452312848583266388373324160190187140051835877600158453279131187530910662656) { return true; }\\n        if (_pubSignals[5] >= 18446744073709551616) { return true; }\\n        if (_pubSignals[6] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[7] >= 904625697166532776746648320380374280103671755200316906558262375061821325312) { return true; }\\n        if (_pubSignals[8] >= 452312848583266388373324160190187140051835877600158453279131187530910662656) { return true; }\\n        if (_pubSignals[9] >= 452312848583266388373324160190187140051835877600158453279131187530910662656) { return true; }\\n        return false;\\n    }\\n\\n    function verifyProof(uint[] calldata _proofs, uint[] calldata _pubSignals) public view returns (bool) {\\n        // Check Argument\\n        require(_proofs.length == proofLength, \\\"Invalid proof\\\");\\n        require(_pubSignals.length == pubSignalLength, \\\"Invalid public signal\\\");\\n        if (isAliased(_pubSignals)) { return false; }\\n        assembly {\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination it.vkey.vk_x\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // it.vkey.vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_proofs.offset, add(_proofs.offset, 64), add(_proofs.offset, 192), _pubSignals.offset, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf58d0b24d8547ae43cc02731699cd9a672be50e7e76f7d05ef6d894f0fc5f668\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611588806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636450764e14610046578063721ea4ac1461006e578063ae440fb014610081575b600080fd5b6100596100543660046113fb565b610096565b60405190151581526020015b60405180910390f35b61005961007c36600461143d565b610297565b610089610a46565b60405161006591906114a9565b6000600160a01b838360008181106100b0576100b06114ed565b90506020020135106100c457506001610291565b600160a01b838360018181106100dc576100dc6114ed565b90506020020135106100f057506001610291565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183836002818110610124576101246114ed565b905060200201351061013857506001610291565b600160a01b83836003818110610150576101506114ed565b905060200201351061016457506001610291565b600160f81b8383600481811061017c5761017c6114ed565b905060200201351061019057506001610291565b68010000000000000000838360058181106101ad576101ad6114ed565b90506020020135106101c157506001610291565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838360068181106101f5576101f56114ed565b905060200201351061020957506001610291565b600160f91b83836007818110610221576102216114ed565b905060200201351061023557506001610291565b600160f81b8383600881811061024d5761024d6114ed565b905060200201351061026157506001610291565b600160f81b83836009818110610279576102796114ed565b905060200201351061028d57506001610291565b5060005b92915050565b6000600884146102ee5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b600a821461033e5760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964207075626c6963207369676e616c000000000000000000000060448201526064016102e5565b6103488383610096565b1561035557506000610a3e565b610a14565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161038d576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806103be576000805260206000f35b5050505050565b7f2b9862b4a2680e912597e0d6fe983ee192013208eb39bd508c3a69d2c55ca5e585527f2a9e85adac861077ae675c20a51799937467a7dfbc5dfa860417c8e364362dcd60208601526000608086018661046287357f1aa575c40c67cda5b6b2c7c837977c43de1c6977240c3fec5c54ad8b845a1d8b7f197adc8202b6263f2a13206c13888fedd81226fc94682cab693d5744b44cd7ac8461035a565b6104b260208801357f232d225b8774b221b7d8a129fe5c819ec5379b19c4c74b1acd1fd591a3a462167f03f8beb0b87324d438982cd93e486786202d4f7fd1ce45a0ecdcca5f58e434c48461035a565b61050260408801357f1f86cea1b2bbb151e4d45b4bea5b0c28fbb93c0f4b17e9659e16cbdac40bd2f67f1d68606f94166608d5f50afd5a2dc52628b97ee7731c1140d2814481190ceefa8461035a565b61055260608801357f12a696a6ff5a9565b5c9866d3002f18a259f33eab9edeeae30d381b894d4f1b77f02ab6bd891e3e9bc1f6eb7e9852d73b3870bd818e6c847735400adbab4619b768461035a565b6105a260808801357f2c70f864e382cd4b7c63bfd82319c58d811082b915dbfc38775b1b30e3482e8e7f2d89197c342abfa4af6034d5b74f967fa0122f908ac34037e3481d513fd8c8d08461035a565b6105f260a08801357f1d542c84c2103129b0be2741cbf071da9347c646ae5aa37cdf37d91007571edf7f26bfa3179e4c21d52816ca0eb4c727a03210a5af5f0023288f6ef5f114c9ac138461035a565b61064260c08801357f02a110e1b41687c2ab8576e34853db4d917207914961a9ea8709a003fb6bf04d7f137326d3aeaf2c2dd9a066745a0fb5144aa7297ad7b58cc906d19264b4531e5e8461035a565b61069260e08801357f0bbf6e9820f8397ef1b755282715fefbb118b45391322a0630181672697d36e07f2686bb6085277e01f91209a31bf20e9f745079b91077b50d8e27e9cacf2d82108461035a565b6106e36101008801357f1b40b3e5ba1a5bbecbb3ef9a5de81fa93a3c5b8497b3f6faf4fe8440e2b912847f2fa9b7c6af336d26776616a00d233b1050b0e13ec54c6323b3043b37674839328461035a565b6107346101208801357f125000b695a20ef50efcf1f3d7017f13fc789cb575d8d512ac2ddb976986e8ca7f0e23f5b88ea33c4d7db70b1b61d88e6e2ef802640e80da1e0acd3c949be34ea48461035a565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f192cae6e67d3127cb845721f700789fda9b5d03743925565c7d16171cb48dfd56102808201527f0d138bed6516777f425dd3167de0924ae7d4edb83fa244d7e2bfbcff7be088286102a08201527f0a48be05f336425b92787170311b6e3598cf847016f07b97c85b955ccd9874496102c08201527f0cb670a4c6e8c4c45543bee20f508dfef387320fc94f583724c88fcf1073e29c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610a32818560c0890160408a018a6103c5565b90508060005260206000f35b949350505050565b60606000610a56600a6002611519565b610a61906010611541565b63ffffffff1667ffffffffffffffff811115610a7f57610a7f611565565b604051908082528060200260200182016040528015610aa8578160200160208202803683370190505b5090507f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281600081518110610adf57610adf6114ed565b6020026020010181815250507f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192681600181518110610b1f57610b1f6114ed565b6020026020010181815250507f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81600281518110610b5f57610b5f6114ed565b6020026020010181815250507f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab81600381518110610b9f57610b9f6114ed565b6020026020010181815250507f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781600481518110610bdf57610bdf6114ed565b6020026020010181815250507f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec881600581518110610c1f57610c1f6114ed565b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281600681518110610c5f57610c5f6114ed565b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81600781518110610c9f57610c9f6114ed565b6020026020010181815250507f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81600881518110610cdf57610cdf6114ed565b6020026020010181815250507f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa81600981518110610d1f57610d1f6114ed565b6020026020010181815250507f192cae6e67d3127cb845721f700789fda9b5d03743925565c7d16171cb48dfd581600a81518110610d5f57610d5f6114ed565b6020026020010181815250507f0d138bed6516777f425dd3167de0924ae7d4edb83fa244d7e2bfbcff7be0882881600b81518110610d9f57610d9f6114ed565b6020026020010181815250507f0a48be05f336425b92787170311b6e3598cf847016f07b97c85b955ccd98744981600c81518110610ddf57610ddf6114ed565b6020026020010181815250507f0cb670a4c6e8c4c45543bee20f508dfef387320fc94f583724c88fcf1073e29c81600d81518110610e1f57610e1f6114ed565b6020026020010181815250507f2b9862b4a2680e912597e0d6fe983ee192013208eb39bd508c3a69d2c55ca5e581600e81518110610e5f57610e5f6114ed565b6020026020010181815250507f2a9e85adac861077ae675c20a51799937467a7dfbc5dfa860417c8e364362dcd81600f81518110610e9f57610e9f6114ed565b6020026020010181815250507f197adc8202b6263f2a13206c13888fedd81226fc94682cab693d5744b44cd7ac81601081518110610edf57610edf6114ed565b6020026020010181815250507f1aa575c40c67cda5b6b2c7c837977c43de1c6977240c3fec5c54ad8b845a1d8b81601181518110610f1f57610f1f6114ed565b6020026020010181815250507f03f8beb0b87324d438982cd93e486786202d4f7fd1ce45a0ecdcca5f58e434c481601281518110610f5f57610f5f6114ed565b6020026020010181815250507f232d225b8774b221b7d8a129fe5c819ec5379b19c4c74b1acd1fd591a3a4621681601381518110610f9f57610f9f6114ed565b6020026020010181815250507f1d68606f94166608d5f50afd5a2dc52628b97ee7731c1140d2814481190ceefa81601481518110610fdf57610fdf6114ed565b6020026020010181815250507f1f86cea1b2bbb151e4d45b4bea5b0c28fbb93c0f4b17e9659e16cbdac40bd2f68160158151811061101f5761101f6114ed565b6020026020010181815250507f02ab6bd891e3e9bc1f6eb7e9852d73b3870bd818e6c847735400adbab4619b768160168151811061105f5761105f6114ed565b6020026020010181815250507f12a696a6ff5a9565b5c9866d3002f18a259f33eab9edeeae30d381b894d4f1b78160178151811061109f5761109f6114ed565b6020026020010181815250507f2d89197c342abfa4af6034d5b74f967fa0122f908ac34037e3481d513fd8c8d0816018815181106110df576110df6114ed565b6020026020010181815250507f2c70f864e382cd4b7c63bfd82319c58d811082b915dbfc38775b1b30e3482e8e8160198151811061111f5761111f6114ed565b6020026020010181815250507f26bfa3179e4c21d52816ca0eb4c727a03210a5af5f0023288f6ef5f114c9ac1381601a8151811061115f5761115f6114ed565b6020026020010181815250507f1d542c84c2103129b0be2741cbf071da9347c646ae5aa37cdf37d91007571edf81601b8151811061119f5761119f6114ed565b6020026020010181815250507f137326d3aeaf2c2dd9a066745a0fb5144aa7297ad7b58cc906d19264b4531e5e81601c815181106111df576111df6114ed565b6020026020010181815250507f02a110e1b41687c2ab8576e34853db4d917207914961a9ea8709a003fb6bf04d81601d8151811061121f5761121f6114ed565b6020026020010181815250507f2686bb6085277e01f91209a31bf20e9f745079b91077b50d8e27e9cacf2d821081601e8151811061125f5761125f6114ed565b6020026020010181815250507f0bbf6e9820f8397ef1b755282715fefbb118b45391322a0630181672697d36e081601f8151811061129f5761129f6114ed565b6020026020010181815250507f2fa9b7c6af336d26776616a00d233b1050b0e13ec54c6323b3043b3767483932816020815181106112df576112df6114ed565b6020026020010181815250507f1b40b3e5ba1a5bbecbb3ef9a5de81fa93a3c5b8497b3f6faf4fe8440e2b912848160218151811061131f5761131f6114ed565b6020026020010181815250507f0e23f5b88ea33c4d7db70b1b61d88e6e2ef802640e80da1e0acd3c949be34ea48160228151811061135f5761135f6114ed565b6020026020010181815250507f125000b695a20ef50efcf1f3d7017f13fc789cb575d8d512ac2ddb976986e8ca8160238151811061139f5761139f6114ed565b6020908102919091010152919050565b60008083601f8401126113c157600080fd5b50813567ffffffffffffffff8111156113d957600080fd5b6020830191508360208260051b85010111156113f457600080fd5b9250929050565b6000806020838503121561140e57600080fd5b823567ffffffffffffffff81111561142557600080fd5b611431858286016113af565b90969095509350505050565b6000806000806040858703121561145357600080fd5b843567ffffffffffffffff8082111561146b57600080fd5b611477888389016113af565b9096509450602087013591508082111561149057600080fd5b5061149d878288016113af565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156114e1578351835292840192918401916001016114c5565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b63ffffffff81811683821602808216919082811461153957611539611503565b505092915050565b63ffffffff81811683821601908082111561155e5761155e611503565b5092915050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000817000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getVerificationKeys()": {
        "details": "returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs.."
      },
      "isAliased(uint256[])": {
        "details": "return true if the public signal is aliased"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}