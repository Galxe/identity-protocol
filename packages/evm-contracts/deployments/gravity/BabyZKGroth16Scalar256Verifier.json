{
  "address": "0x5F6CFf23e9A4f63e934891eE8eb6071423385aD0",
  "abi": [
    {
      "inputs": [],
      "name": "AliasedPublicSignal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getVerificationKeys",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "isAliased",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_proofs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b1a164daae238e8847c7119f93edc05e9da9acc84661a26120453e065b67ad2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xb85b3D61439a3d70D3DF7913a3A764F352b32C55",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1356501",
    "logsBloom": "0x
    "blockHash": "0x39815594bbfd1e663ba99b376578dc812c43f74e8ed017595bb4c949a5faf508",
    "transactionHash": "0x3b1a164daae238e8847c7119f93edc05e9da9acc84661a26120453e065b67ad2",
    "logs": [],
    "blockNumber": 36,
    "cumulativeGasUsed": "1356501",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e08d6b930820ab219ef1afbfaba72b7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AliasedPublicSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getVerificationKeys\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"isAliased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getVerificationKeys()\":{\"details\":\"returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs..\"},\"isAliased(uint256[])\":{\"details\":\"return true if the public signal is aliased\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/primitive/scalar256_verifier.sol\":\"BabyZKGroth16Scalar256Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/primitive/scalar256_verifier.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright (c) 2021 0KIMS association.\\n    Copyright (c) [2024] Galxe.com.\\n\\n    Modifications to this file are part of the Galxe Identity Protocol SDK,\\n    which is built using the snarkJS template and is subject to the GNU\\n    General Public License v3.0.\\n\\n    snarkJS is free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract BabyZKGroth16Scalar256Verifier {\\n    error AliasedPublicSignal();\\n\\n    // Scalar field size\\n    uint256 constant r   = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 9002726567792901338145770338648851440665823341997621957553321445773518291201;\\n    uint256 constant deltax2 = 8048387181119775934407874257556010377368046340138774947391638565383453457854;\\n    uint256 constant deltay1 = 2718645317831892489973703729635262538568144422731125202585769031798053045300;\\n    uint256 constant deltay2 = 8957442281714910990845537002241963810890562605622744722122848529914409256547;\\n\\n    uint256 constant IC0x = 11479251601148187970310415309010146480899682740703523247990590200202053807124;\\n    uint256 constant IC0y = 21083168692728939898991139059058064552332968885842672334904791808186019136560;\\n    uint256 constant IC1x = 17139656022314565899947223226238212498153791883758684666359146887235985027355;\\n    uint256 constant IC1y = 5759831185708410406027533711712631497041173639600475498340532362099836591454;\\n    uint256 constant IC2x = 3840892930183184286382169754048061207708010033264629551235506756284868765597;\\n    uint256 constant IC2y = 13292935637386979710163367957575589475676317839630145123575964867360518760078;\\n    uint256 constant IC3x = 14425896658876322153841736821227659462338658563206356116834179948859021927820;\\n    uint256 constant IC3y = 11998837696571103490805989765147144523338663550360011135029236260560590145167;\\n    uint256 constant IC4x = 15838157656396283205758658870397744925938821754679242646369185562562468458734;\\n    uint256 constant IC4y = 12586452593690608472550984698912707597984671686143445239302138098157518018732;\\n    uint256 constant IC5x = 14656106878490889611505265823914944212494806408313040095736331493814099525095;\\n    uint256 constant IC5y = 12013065347588874809825301263760346302728620767901113064623351697573528443070;\\n    uint256 constant IC6x = 19034340618162277641950528462193750482846207017748396234762342999785567728268;\\n    uint256 constant IC6y = 15683528069115324522560017126210462968459896549455082442918093229099690097179;\\n    uint256 constant IC7x = 18200465409922896053135045999544076760811890024681939696983399445993694455931;\\n    uint256 constant IC7y = 10708753298528809752558899093280528895981363761543638893574652765326674760686;\\n    uint256 constant IC8x = 5222312593979339166706479205702886433485592614970797473745807179984592999446;\\n    uint256 constant IC8y = 20999559870318689626143767431956003169444715876689551820757291506975530922585;\\n    uint256 constant IC9x = 3589838198546727926920845044363223471614991762538708293653429894967180730196;\\n    uint256 constant IC9y = 819276690311245205150423144210659610500241984162727857374977686978219357658;\\n    uint256 constant IC10x = 1452880846127336750523534286062738236740957577253439876227021057199618563670;\\n    uint256 constant IC10y = 21143486064061152869147893343070572783058213567010851666764323467996393626269;\\n    uint256 constant IC11x = 18823881327175454868891113067085648636669687864583281765945646841861181353658;\\n    uint256 constant IC11y = 16865319818275834632795027598001079767321134040468678707665858147692037386957;\\n    uint256 constant IC12x = 17758171080275092220228017196714472086483239056016118195876589472141758971515;\\n    uint256 constant IC12y = 14894516246997233613141689717875005468127476778596469201935650082217142575778;\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    uint16 constant proofLength = 8;\\n    uint32 constant pubSignalLength = 12;\\n\\n    /// @dev returns the verification keys in the order that the verifier expects them:\\n    /// alpha, beta, gamma, delta, ICs..\\n    function getVerificationKeys() public pure returns (uint[] memory) {\\n        uint[] memory vks = new uint[](16 + pubSignalLength * 2);\\n        vks[0] = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n        vks[1] = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n        vks[2] = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n        vks[3] = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n        vks[4] = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n        vks[5] = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n        vks[6] = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n        vks[7] = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n        vks[8] = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n        vks[9] = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n        vks[10] = 9002726567792901338145770338648851440665823341997621957553321445773518291201;\\n        vks[11] = 8048387181119775934407874257556010377368046340138774947391638565383453457854;\\n        vks[12] = 2718645317831892489973703729635262538568144422731125202585769031798053045300;\\n        vks[13] = 8957442281714910990845537002241963810890562605622744722122848529914409256547;\\n        vks[14] = 11479251601148187970310415309010146480899682740703523247990590200202053807124;\\n        vks[15] = 21083168692728939898991139059058064552332968885842672334904791808186019136560;\\n        vks[16] = 17139656022314565899947223226238212498153791883758684666359146887235985027355;\\n        vks[17] = 5759831185708410406027533711712631497041173639600475498340532362099836591454;\\n        vks[18] = 3840892930183184286382169754048061207708010033264629551235506756284868765597;\\n        vks[19] = 13292935637386979710163367957575589475676317839630145123575964867360518760078;\\n        vks[20] = 14425896658876322153841736821227659462338658563206356116834179948859021927820;\\n        vks[21] = 11998837696571103490805989765147144523338663550360011135029236260560590145167;\\n        vks[22] = 15838157656396283205758658870397744925938821754679242646369185562562468458734;\\n        vks[23] = 12586452593690608472550984698912707597984671686143445239302138098157518018732;\\n        vks[24] = 14656106878490889611505265823914944212494806408313040095736331493814099525095;\\n        vks[25] = 12013065347588874809825301263760346302728620767901113064623351697573528443070;\\n        vks[26] = 19034340618162277641950528462193750482846207017748396234762342999785567728268;\\n        vks[27] = 15683528069115324522560017126210462968459896549455082442918093229099690097179;\\n        vks[28] = 18200465409922896053135045999544076760811890024681939696983399445993694455931;\\n        vks[29] = 10708753298528809752558899093280528895981363761543638893574652765326674760686;\\n        vks[30] = 5222312593979339166706479205702886433485592614970797473745807179984592999446;\\n        vks[31] = 20999559870318689626143767431956003169444715876689551820757291506975530922585;\\n        vks[32] = 3589838198546727926920845044363223471614991762538708293653429894967180730196;\\n        vks[33] = 819276690311245205150423144210659610500241984162727857374977686978219357658;\\n        vks[34] = 1452880846127336750523534286062738236740957577253439876227021057199618563670;\\n        vks[35] = 21143486064061152869147893343070572783058213567010851666764323467996393626269;\\n        vks[36] = 18823881327175454868891113067085648636669687864583281765945646841861181353658;\\n        vks[37] = 16865319818275834632795027598001079767321134040468678707665858147692037386957;\\n        vks[38] = 17758171080275092220228017196714472086483239056016118195876589472141758971515;\\n        vks[39] = 14894516246997233613141689717875005468127476778596469201935650082217142575778;\\n        return vks;\\n    }\\n\\n    /// @dev return true if the public signal is aliased\\n    function isAliased(uint[] calldata _pubSignals) public pure returns (bool) {\\n        // Alias check\\n        if (_pubSignals[0] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[1] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[2] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[3] >= 1461501637330902918203684832716283019655932542976) { return true; }\\n        if (_pubSignals[4] >= 452312848583266388373324160190187140051835877600158453279131187530910662656) { return true; }\\n        if (_pubSignals[5] >= 18446744073709551616) { return true; }\\n        if (_pubSignals[6] >= 21888242871839275222246405745257275088548364400416034343698204186575808495617) { return true; }\\n        if (_pubSignals[7] >= 904625697166532776746648320380374280103671755200316906558262375061821325312) { return true; }\\n        if (_pubSignals[8] >= 340282366920938463463374607431768211456) { return true; }\\n        if (_pubSignals[9] >= 340282366920938463463374607431768211456) { return true; }\\n        if (_pubSignals[10] >= 340282366920938463463374607431768211456) { return true; }\\n        if (_pubSignals[11] >= 340282366920938463463374607431768211456) { return true; }\\n        return false;\\n    }\\n\\n    function verifyProof(uint[] calldata _proofs, uint[] calldata _pubSignals) public view returns (bool) {\\n        // Check Argument\\n        require(_proofs.length == proofLength, \\\"Invalid proof\\\");\\n        require(_pubSignals.length == pubSignalLength, \\\"Invalid public signal\\\");\\n        if (isAliased(_pubSignals)) { return false; }\\n        assembly {\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination it.vkey.vk_x\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // it.vkey.vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_proofs.offset, add(_proofs.offset, 64), add(_proofs.offset, 192), _pubSignals.offset, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b22bae7081270283dd8baf6980cf2a5873a9dec5b2a721893e49d8587952e96\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getVerificationKeys()": {
        "details": "returns the verification keys in the order that the verifier expects them: alpha, beta, gamma, delta, ICs.."
      },
      "isAliased(uint256[])": {
        "details": "return true if the public signal is aliased"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}